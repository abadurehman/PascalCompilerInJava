/* This file was generated by SableCC (http://www.sablecc.org/). */

package parser;

import lexer.*;
import node.*;
import analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PStart node1 = (PStart) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAstart1Start */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAstart2Start */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce AAstart3Start */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list, false);
            }
            break;
            case 3: /* reduce AAstart4Start */
            {
                ArrayList<Object> list = new3();
                push(goTo(0), list, false);
            }
            break;
            case 4: /* reduce ASingleDeclarations */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list, false);
            }
            break;
            case 5: /* reduce AIfThenStatementStatement */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list, false);
            }
            break;
            case 6: /* reduce AIfThenElseStatementStatement */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list, false);
            }
            break;
            case 7: /* reduce AWhileStatement */
            {
                ArrayList<Object> list = new7();
                push(goTo(2), list, false);
            }
            break;
            case 8: /* reduce AAssignStatement */
            {
                ArrayList<Object> list = new8();
                push(goTo(2), list, false);
            }
            break;
            case 9: /* reduce APrintStatement */
            {
                ArrayList<Object> list = new9();
                push(goTo(2), list, false);
            }
            break;
            case 10: /* reduce ANestedStatement */
            {
                ArrayList<Object> list = new10();
                push(goTo(2), list, false);
            }
            break;
            case 11: /* reduce ABreakStatement */
            {
                ArrayList<Object> list = new11();
                push(goTo(2), list, false);
            }
            break;
            case 12: /* reduce AStatement */
            {
                ArrayList<Object> list = new12();
                push(goTo(2), list, false);
            }
            break;
            case 13: /* reduce AIfStatementNoShortIf */
            {
                ArrayList<Object> list = new13();
                push(goTo(3), list, false);
            }
            break;
            case 14: /* reduce AWhileStatementNoShortIf */
            {
                ArrayList<Object> list = new14();
                push(goTo(3), list, false);
            }
            break;
            case 15: /* reduce AAssignStatementNoShortIf */
            {
                ArrayList<Object> list = new15();
                push(goTo(3), list, false);
            }
            break;
            case 16: /* reduce APrintStatementNoShortIf */
            {
                ArrayList<Object> list = new16();
                push(goTo(3), list, false);
            }
            break;
            case 17: /* reduce ANestedStatementNoShortIf */
            {
                ArrayList<Object> list = new17();
                push(goTo(3), list, false);
            }
            break;
            case 18: /* reduce ABreakStatementNoShortIf */
            {
                ArrayList<Object> list = new18();
                push(goTo(3), list, false);
            }
            break;
            case 19: /* reduce AStatementNoShortIf */
            {
                ArrayList<Object> list = new19();
                push(goTo(3), list, false);
            }
            break;
            case 20: /* reduce AWhileWhileStatementNoShortIf */
            {
                ArrayList<Object> list = new20();
                push(goTo(4), list, false);
            }
            break;
            case 21: /* reduce AWhileWhileStatement */
            {
                ArrayList<Object> list = new21();
                push(goTo(5), list, false);
            }
            break;
            case 22: /* reduce APrint */
            {
                ArrayList<Object> list = new22();
                push(goTo(6), list, false);
            }
            break;
            case 23: /* reduce AAssignment */
            {
                ArrayList<Object> list = new23();
                push(goTo(7), list, false);
            }
            break;
            case 24: /* reduce ABooleanType */
            {
                ArrayList<Object> list = new24();
                push(goTo(8), list, false);
            }
            break;
            case 25: /* reduce AIntegerType */
            {
                ArrayList<Object> list = new25();
                push(goTo(8), list, false);
            }
            break;
            case 26: /* reduce AComparisionExpression */
            {
                ArrayList<Object> list = new26();
                push(goTo(9), list, false);
            }
            break;
            case 27: /* reduce AExpression */
            {
                ArrayList<Object> list = new27();
                push(goTo(9), list, false);
            }
            break;
            case 28: /* reduce APlusExpression2 */
            {
                ArrayList<Object> list = new28();
                push(goTo(10), list, false);
            }
            break;
            case 29: /* reduce AMinusExpression2 */
            {
                ArrayList<Object> list = new29();
                push(goTo(10), list, false);
            }
            break;
            case 30: /* reduce AOrExpression2 */
            {
                ArrayList<Object> list = new30();
                push(goTo(10), list, false);
            }
            break;
            case 31: /* reduce AXorExpression2 */
            {
                ArrayList<Object> list = new31();
                push(goTo(10), list, false);
            }
            break;
            case 32: /* reduce AExpression2 */
            {
                ArrayList<Object> list = new32();
                push(goTo(10), list, false);
            }
            break;
            case 33: /* reduce AModExpression3 */
            {
                ArrayList<Object> list = new33();
                push(goTo(11), list, false);
            }
            break;
            case 34: /* reduce AMultExpression3 */
            {
                ArrayList<Object> list = new34();
                push(goTo(11), list, false);
            }
            break;
            case 35: /* reduce ADivExpression3 */
            {
                ArrayList<Object> list = new35();
                push(goTo(11), list, false);
            }
            break;
            case 36: /* reduce AAndExpression3 */
            {
                ArrayList<Object> list = new36();
                push(goTo(11), list, false);
            }
            break;
            case 37: /* reduce AExpression3 */
            {
                ArrayList<Object> list = new37();
                push(goTo(11), list, false);
            }
            break;
            case 38: /* reduce ANotExpression4 */
            {
                ArrayList<Object> list = new38();
                push(goTo(12), list, false);
            }
            break;
            case 39: /* reduce ANumberExpression4 */
            {
                ArrayList<Object> list = new39();
                push(goTo(12), list, false);
            }
            break;
            case 40: /* reduce AIdentifierExpression4 */
            {
                ArrayList<Object> list = new40();
                push(goTo(12), list, false);
            }
            break;
            case 41: /* reduce ATrueExpression4 */
            {
                ArrayList<Object> list = new41();
                push(goTo(12), list, false);
            }
            break;
            case 42: /* reduce AFalseExpression4 */
            {
                ArrayList<Object> list = new42();
                push(goTo(12), list, false);
            }
            break;
            case 43: /* reduce AGtComparision */
            {
                ArrayList<Object> list = new43();
                push(goTo(13), list, false);
            }
            break;
            case 44: /* reduce AGeComparision */
            {
                ArrayList<Object> list = new44();
                push(goTo(13), list, false);
            }
            break;
            case 45: /* reduce ALtComparision */
            {
                ArrayList<Object> list = new45();
                push(goTo(13), list, false);
            }
            break;
            case 46: /* reduce ALeComparision */
            {
                ArrayList<Object> list = new46();
                push(goTo(13), list, false);
            }
            break;
            case 47: /* reduce ANeComparision */
            {
                ArrayList<Object> list = new47();
                push(goTo(13), list, false);
            }
            break;
            case 48: /* reduce AEqComparision */
            {
                ArrayList<Object> list = new48();
                push(goTo(13), list, false);
            }
            break;
            case 49: /* reduce AIfThenStatement */
            {
                ArrayList<Object> list = new49();
                push(goTo(14), list, false);
            }
            break;
            case 50: /* reduce AIfThenElseStatement */
            {
                ArrayList<Object> list = new50();
                push(goTo(15), list, false);
            }
            break;
            case 51: /* reduce AIfThenElseStatementNoShortIf */
            {
                ArrayList<Object> list = new51();
                push(goTo(16), list, false);
            }
            break;
            case 52: /* reduce ATerminal$Declarations */
            {
                ArrayList<Object> list = new52();
                push(goTo(17), list, true);
            }
            break;
            case 53: /* reduce ANonTerminal$Declarations */
            {
                ArrayList<Object> list = new53();
                push(goTo(17), list, true);
            }
            break;
            case 54: /* reduce ATerminal$Statement */
            {
                ArrayList<Object> list = new54();
                push(goTo(18), list, true);
            }
            break;
            case 55: /* reduce ANonTerminal$Statement */
            {
                ArrayList<Object> list = new55();
                push(goTo(18), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAstart1Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        TProgram tprogramNode2;
        TIdentifier tidentifierNode3;
        TSemicolon tsemicolonNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TBegin tbeginNode6;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TProgramend tprogramendNode8;
        tprogramNode2 = (TProgram)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);
        {
            // Block
        }
        tbeginNode6 = (TBegin)nodeArrayList4.get(0);
        {
            // Block
        }
        tprogramendNode8 = (TProgramend)nodeArrayList5.get(0);

        pstartNode1 = new AStart(tprogramNode2, tidentifierNode3, tsemicolonNode4, listNode5, tbeginNode6, listNode7, tprogramendNode8);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAstart2Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        TProgram tprogramNode2;
        TIdentifier tidentifierNode3;
        TSemicolon tsemicolonNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TBegin tbeginNode7;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TProgramend tprogramendNode9;
        tprogramNode2 = (TProgram)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tbeginNode7 = (TBegin)nodeArrayList5.get(0);
        {
            // Block
        }
        tprogramendNode9 = (TProgramend)nodeArrayList6.get(0);

        pstartNode1 = new AStart(tprogramNode2, tidentifierNode3, tsemicolonNode4, listNode6, tbeginNode7, listNode8, tprogramendNode9);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAstart3Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        TProgram tprogramNode2;
        TIdentifier tidentifierNode3;
        TSemicolon tsemicolonNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TBegin tbeginNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TProgramend tprogramendNode9;
        tprogramNode2 = (TProgram)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);
        {
            // Block
        }
        tbeginNode6 = (TBegin)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList5.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        tprogramendNode9 = (TProgramend)nodeArrayList6.get(0);

        pstartNode1 = new AStart(tprogramNode2, tidentifierNode3, tsemicolonNode4, listNode5, tbeginNode6, listNode8, tprogramendNode9);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAstart4Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStart pstartNode1;
        {
            // Block
        TProgram tprogramNode2;
        TIdentifier tidentifierNode3;
        TSemicolon tsemicolonNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TBegin tbeginNode7;
        LinkedList<Object> listNode9 = new LinkedList<Object>();
        TProgramend tprogramendNode10;
        tprogramNode2 = (TProgram)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tsemicolonNode4 = (TSemicolon)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tbeginNode7 = (TBegin)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        listNode8 = (LinkedList)nodeArrayList6.get(0);
	if(listNode8 != null)
	{
	  listNode9.addAll(listNode8);
	}
        }
        tprogramendNode10 = (TProgramend)nodeArrayList7.get(0);

        pstartNode1 = new AStart(tprogramNode2, tidentifierNode3, tsemicolonNode4, listNode6, tbeginNode7, listNode9, tprogramendNode10);
        }
	nodeList.add(pstartNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ASingleDeclarations */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclarations pdeclarationsNode1;
        {
            // Block
        TVar tvarNode2;
        TIdentifier tidentifierNode3;
        TColon tcolonNode4;
        PType ptypeNode5;
        TSemicolon tsemicolonNode6;
        tvarNode2 = (TVar)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tcolonNode4 = (TColon)nodeArrayList3.get(0);
        ptypeNode5 = (PType)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        pdeclarationsNode1 = new ASingleDeclarations(tvarNode2, tidentifierNode3, tcolonNode4, ptypeNode5, tsemicolonNode6);
        }
	nodeList.add(pdeclarationsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AIfThenStatementStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PIfThenStatement pifthenstatementNode2;
        pifthenstatementNode2 = (PIfThenStatement)nodeArrayList1.get(0);

        pstatementNode1 = new AIfThenStatementStatement(pifthenstatementNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AIfThenElseStatementStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PIfThenElseStatement pifthenelsestatementNode2;
        pifthenelsestatementNode2 = (PIfThenElseStatement)nodeArrayList1.get(0);

        pstatementNode1 = new AIfThenElseStatementStatement(pifthenelsestatementNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AWhileStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PWhileStatement pwhilestatementNode2;
        pwhilestatementNode2 = (PWhileStatement)nodeArrayList1.get(0);

        pstatementNode1 = new AWhileStatement(pwhilestatementNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AAssignStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PAssignment passignmentNode2;
        passignmentNode2 = (PAssignment)nodeArrayList1.get(0);

        pstatementNode1 = new AAssignStatement(passignmentNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce APrintStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PPrint pprintNode2;
        pprintNode2 = (PPrint)nodeArrayList1.get(0);

        pstatementNode1 = new APrintStatement(pprintNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ANestedStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TBegin tbeginNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TEnd tendNode5;
        tbeginNode2 = (TBegin)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tendNode5 = (TEnd)nodeArrayList3.get(0);

        pstatementNode1 = new ANestedStatement(tbeginNode2, listNode4, tendNode5);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ABreakStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TBreak tbreakNode2;
        TSemicolon tsemicolonNode3;
        tbreakNode2 = (TBreak)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);

        pstatementNode1 = new ABreakStatement(tbreakNode2, tsemicolonNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TSemicolon tsemicolonNode2;
        tsemicolonNode2 = (TSemicolon)nodeArrayList1.get(0);

        pstatementNode1 = new AStatement(tsemicolonNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AIfStatementNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementNoShortIf pstatementnoshortifNode1;
        {
            // Block
        PIfThenElseStatementNoShortIf pifthenelsestatementnoshortifNode2;
        pifthenelsestatementnoshortifNode2 = (PIfThenElseStatementNoShortIf)nodeArrayList1.get(0);

        pstatementnoshortifNode1 = new AIfStatementNoShortIf(pifthenelsestatementnoshortifNode2);
        }
	nodeList.add(pstatementnoshortifNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AWhileStatementNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementNoShortIf pstatementnoshortifNode1;
        {
            // Block
        PWhileStatementNoShortIf pwhilestatementnoshortifNode2;
        pwhilestatementnoshortifNode2 = (PWhileStatementNoShortIf)nodeArrayList1.get(0);

        pstatementnoshortifNode1 = new AWhileStatementNoShortIf(pwhilestatementnoshortifNode2);
        }
	nodeList.add(pstatementnoshortifNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAssignStatementNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementNoShortIf pstatementnoshortifNode1;
        {
            // Block
        PAssignment passignmentNode2;
        passignmentNode2 = (PAssignment)nodeArrayList1.get(0);

        pstatementnoshortifNode1 = new AAssignStatementNoShortIf(passignmentNode2);
        }
	nodeList.add(pstatementnoshortifNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce APrintStatementNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementNoShortIf pstatementnoshortifNode1;
        {
            // Block
        PPrint pprintNode2;
        pprintNode2 = (PPrint)nodeArrayList1.get(0);

        pstatementnoshortifNode1 = new APrintStatementNoShortIf(pprintNode2);
        }
	nodeList.add(pstatementnoshortifNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce ANestedStatementNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementNoShortIf pstatementnoshortifNode1;
        {
            // Block
        TBegin tbeginNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TEnd tendNode5;
        tbeginNode2 = (TBegin)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tendNode5 = (TEnd)nodeArrayList3.get(0);

        pstatementnoshortifNode1 = new ANestedStatementNoShortIf(tbeginNode2, listNode4, tendNode5);
        }
	nodeList.add(pstatementnoshortifNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ABreakStatementNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementNoShortIf pstatementnoshortifNode1;
        {
            // Block
        TBreak tbreakNode2;
        tbreakNode2 = (TBreak)nodeArrayList1.get(0);

        pstatementnoshortifNode1 = new ABreakStatementNoShortIf(tbreakNode2);
        }
	nodeList.add(pstatementnoshortifNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AStatementNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatementNoShortIf pstatementnoshortifNode1;
        {
            // Block
        TSemicolon tsemicolonNode2;
        tsemicolonNode2 = (TSemicolon)nodeArrayList1.get(0);

        pstatementnoshortifNode1 = new AStatementNoShortIf(tsemicolonNode2);
        }
	nodeList.add(pstatementnoshortifNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AWhileWhileStatementNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PWhileStatementNoShortIf pwhilestatementnoshortifNode1;
        {
            // Block
        TWhile twhileNode2;
        PExpression pexpressionNode3;
        TDo tdoNode4;
        PStatementNoShortIf pstatementnoshortifNode5;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tdoNode4 = (TDo)nodeArrayList3.get(0);
        pstatementnoshortifNode5 = (PStatementNoShortIf)nodeArrayList4.get(0);

        pwhilestatementnoshortifNode1 = new AWhileWhileStatementNoShortIf(twhileNode2, pexpressionNode3, tdoNode4, pstatementnoshortifNode5);
        }
	nodeList.add(pwhilestatementnoshortifNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AWhileWhileStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PWhileStatement pwhilestatementNode1;
        {
            // Block
        TWhile twhileNode2;
        PExpression pexpressionNode3;
        TDo tdoNode4;
        PStatement pstatementNode5;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tdoNode4 = (TDo)nodeArrayList3.get(0);
        pstatementNode5 = (PStatement)nodeArrayList4.get(0);

        pwhilestatementNode1 = new AWhileWhileStatement(twhileNode2, pexpressionNode3, tdoNode4, pstatementNode5);
        }
	nodeList.add(pwhilestatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce APrint */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrint pprintNode1;
        {
            // Block
        TWriteln twritelnNode2;
        TLPar tlparNode3;
        PExpression pexpressionNode4;
        TRPar trparNode5;
        twritelnNode2 = (TWriteln)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pprintNode1 = new APrint(twritelnNode2, tlparNode3, pexpressionNode4, trparNode5);
        }
	nodeList.add(pprintNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AAssignment */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignment passignmentNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TAssign tassignNode3;
        PExpression pexpressionNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tassignNode3 = (TAssign)nodeArrayList2.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList3.get(0);

        passignmentNode1 = new AAssignment(tidentifierNode2, tassignNode3, pexpressionNode4);
        }
	nodeList.add(passignmentNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ABooleanType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBoolean tbooleanNode2;
        tbooleanNode2 = (TBoolean)nodeArrayList1.get(0);

        ptypeNode1 = new ABooleanType(tbooleanNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AIntegerType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TInteger tintegerNode2;
        tintegerNode2 = (TInteger)nodeArrayList1.get(0);

        ptypeNode1 = new AIntegerType(tintegerNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AComparisionExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PComparision pcomparisionNode3;
        PExpression2 pexpression2Node4;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pcomparisionNode3 = (PComparision)nodeArrayList2.get(0);
        pexpression2Node4 = (PExpression2)nodeArrayList3.get(0);

        pexpressionNode1 = new AComparisionExpression(pexpressionNode2, pcomparisionNode3, pexpression2Node4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression2 pexpression2Node2;
        pexpression2Node2 = (PExpression2)nodeArrayList1.get(0);

        pexpressionNode1 = new AExpression(pexpression2Node2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce APlusExpression2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression2 pexpression2Node1;
        {
            // Block
        PExpression2 pexpression2Node2;
        TPlus tplusNode3;
        PExpression3 pexpression3Node4;
        pexpression2Node2 = (PExpression2)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pexpression3Node4 = (PExpression3)nodeArrayList3.get(0);

        pexpression2Node1 = new APlusExpression2(pexpression2Node2, tplusNode3, pexpression3Node4);
        }
	nodeList.add(pexpression2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AMinusExpression2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression2 pexpression2Node1;
        {
            // Block
        PExpression2 pexpression2Node2;
        TMinus tminusNode3;
        PExpression3 pexpression3Node4;
        pexpression2Node2 = (PExpression2)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pexpression3Node4 = (PExpression3)nodeArrayList3.get(0);

        pexpression2Node1 = new AMinusExpression2(pexpression2Node2, tminusNode3, pexpression3Node4);
        }
	nodeList.add(pexpression2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AOrExpression2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression2 pexpression2Node1;
        {
            // Block
        PExpression2 pexpression2Node2;
        TOr torNode3;
        PExpression3 pexpression3Node4;
        pexpression2Node2 = (PExpression2)nodeArrayList1.get(0);
        torNode3 = (TOr)nodeArrayList2.get(0);
        pexpression3Node4 = (PExpression3)nodeArrayList3.get(0);

        pexpression2Node1 = new AOrExpression2(pexpression2Node2, torNode3, pexpression3Node4);
        }
	nodeList.add(pexpression2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AXorExpression2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression2 pexpression2Node1;
        {
            // Block
        PExpression2 pexpression2Node2;
        TXor txorNode3;
        PExpression3 pexpression3Node4;
        pexpression2Node2 = (PExpression2)nodeArrayList1.get(0);
        txorNode3 = (TXor)nodeArrayList2.get(0);
        pexpression3Node4 = (PExpression3)nodeArrayList3.get(0);

        pexpression2Node1 = new AXorExpression2(pexpression2Node2, txorNode3, pexpression3Node4);
        }
	nodeList.add(pexpression2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AExpression2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression2 pexpression2Node1;
        {
            // Block
        PExpression3 pexpression3Node2;
        pexpression3Node2 = (PExpression3)nodeArrayList1.get(0);

        pexpression2Node1 = new AExpression2(pexpression3Node2);
        }
	nodeList.add(pexpression2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AModExpression3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression3 pexpression3Node1;
        {
            // Block
        PExpression3 pexpression3Node2;
        TMod tmodNode3;
        PExpression4 pexpression4Node4;
        pexpression3Node2 = (PExpression3)nodeArrayList1.get(0);
        tmodNode3 = (TMod)nodeArrayList2.get(0);
        pexpression4Node4 = (PExpression4)nodeArrayList3.get(0);

        pexpression3Node1 = new AModExpression3(pexpression3Node2, tmodNode3, pexpression4Node4);
        }
	nodeList.add(pexpression3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AMultExpression3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression3 pexpression3Node1;
        {
            // Block
        PExpression3 pexpression3Node2;
        TMult tmultNode3;
        PExpression4 pexpression4Node4;
        pexpression3Node2 = (PExpression3)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        pexpression4Node4 = (PExpression4)nodeArrayList3.get(0);

        pexpression3Node1 = new AMultExpression3(pexpression3Node2, tmultNode3, pexpression4Node4);
        }
	nodeList.add(pexpression3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce ADivExpression3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression3 pexpression3Node1;
        {
            // Block
        PExpression3 pexpression3Node2;
        TDiv tdivNode3;
        PExpression4 pexpression4Node4;
        pexpression3Node2 = (PExpression3)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        pexpression4Node4 = (PExpression4)nodeArrayList3.get(0);

        pexpression3Node1 = new ADivExpression3(pexpression3Node2, tdivNode3, pexpression4Node4);
        }
	nodeList.add(pexpression3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AAndExpression3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression3 pexpression3Node1;
        {
            // Block
        PExpression3 pexpression3Node2;
        TAnd tandNode3;
        PExpression4 pexpression4Node4;
        pexpression3Node2 = (PExpression3)nodeArrayList1.get(0);
        tandNode3 = (TAnd)nodeArrayList2.get(0);
        pexpression4Node4 = (PExpression4)nodeArrayList3.get(0);

        pexpression3Node1 = new AAndExpression3(pexpression3Node2, tandNode3, pexpression4Node4);
        }
	nodeList.add(pexpression3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AExpression3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression3 pexpression3Node1;
        {
            // Block
        PExpression4 pexpression4Node2;
        pexpression4Node2 = (PExpression4)nodeArrayList1.get(0);

        pexpression3Node1 = new AExpression3(pexpression4Node2);
        }
	nodeList.add(pexpression3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ANotExpression4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression4 pexpression4Node1;
        {
            // Block
        TNot tnotNode2;
        PExpression4 pexpression4Node3;
        tnotNode2 = (TNot)nodeArrayList1.get(0);
        pexpression4Node3 = (PExpression4)nodeArrayList2.get(0);

        pexpression4Node1 = new ANotExpression4(tnotNode2, pexpression4Node3);
        }
	nodeList.add(pexpression4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ANumberExpression4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression4 pexpression4Node1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pexpression4Node1 = new ANumberExpression4(tnumberNode2);
        }
	nodeList.add(pexpression4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AIdentifierExpression4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression4 pexpression4Node1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pexpression4Node1 = new AIdentifierExpression4(tidentifierNode2);
        }
	nodeList.add(pexpression4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ATrueExpression4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression4 pexpression4Node1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pexpression4Node1 = new ATrueExpression4(ttrueNode2);
        }
	nodeList.add(pexpression4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AFalseExpression4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression4 pexpression4Node1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pexpression4Node1 = new AFalseExpression4(tfalseNode2);
        }
	nodeList.add(pexpression4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AGtComparision */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparision pcomparisionNode1;
        {
            // Block
        TGt tgtNode2;
        tgtNode2 = (TGt)nodeArrayList1.get(0);

        pcomparisionNode1 = new AGtComparision(tgtNode2);
        }
	nodeList.add(pcomparisionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AGeComparision */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparision pcomparisionNode1;
        {
            // Block
        TGe tgeNode2;
        tgeNode2 = (TGe)nodeArrayList1.get(0);

        pcomparisionNode1 = new AGeComparision(tgeNode2);
        }
	nodeList.add(pcomparisionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ALtComparision */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparision pcomparisionNode1;
        {
            // Block
        TLt tltNode2;
        tltNode2 = (TLt)nodeArrayList1.get(0);

        pcomparisionNode1 = new ALtComparision(tltNode2);
        }
	nodeList.add(pcomparisionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce ALeComparision */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparision pcomparisionNode1;
        {
            // Block
        TLe tleNode2;
        tleNode2 = (TLe)nodeArrayList1.get(0);

        pcomparisionNode1 = new ALeComparision(tleNode2);
        }
	nodeList.add(pcomparisionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ANeComparision */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparision pcomparisionNode1;
        {
            // Block
        TNe tneNode2;
        tneNode2 = (TNe)nodeArrayList1.get(0);

        pcomparisionNode1 = new ANeComparision(tneNode2);
        }
	nodeList.add(pcomparisionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AEqComparision */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparision pcomparisionNode1;
        {
            // Block
        TEq teqNode2;
        teqNode2 = (TEq)nodeArrayList1.get(0);

        pcomparisionNode1 = new AEqComparision(teqNode2);
        }
	nodeList.add(pcomparisionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AIfThenStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfThenStatement pifthenstatementNode1;
        {
            // Block
        TIf tifNode2;
        PExpression pexpressionNode3;
        TThen tthenNode4;
        PStatement pstatementNode5;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        pstatementNode5 = (PStatement)nodeArrayList4.get(0);

        pifthenstatementNode1 = new AIfThenStatement(tifNode2, pexpressionNode3, tthenNode4, pstatementNode5);
        }
	nodeList.add(pifthenstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AIfThenElseStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfThenElseStatement pifthenelsestatementNode1;
        {
            // Block
        TIf tifNode2;
        PExpression pexpressionNode3;
        TThen tthenNode4;
        PStatementNoShortIf pstatementnoshortifNode5;
        TElse telseNode6;
        PStatement pstatementNode7;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        pstatementnoshortifNode5 = (PStatementNoShortIf)nodeArrayList4.get(0);
        telseNode6 = (TElse)nodeArrayList5.get(0);
        pstatementNode7 = (PStatement)nodeArrayList6.get(0);

        pifthenelsestatementNode1 = new AIfThenElseStatement(tifNode2, pexpressionNode3, tthenNode4, pstatementnoshortifNode5, telseNode6, pstatementNode7);
        }
	nodeList.add(pifthenelsestatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AIfThenElseStatementNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfThenElseStatementNoShortIf pifthenelsestatementnoshortifNode1;
        {
            // Block
        TIf tifNode2;
        PExpression pexpressionNode3;
        TThen tthenNode4;
        PStatementNoShortIf pstatementnoshortifNode5;
        TElse telseNode6;
        PStatementNoShortIf pstatementnoshortifNode7;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);
        pstatementnoshortifNode5 = (PStatementNoShortIf)nodeArrayList4.get(0);
        telseNode6 = (TElse)nodeArrayList5.get(0);
        pstatementnoshortifNode7 = (PStatementNoShortIf)nodeArrayList6.get(0);

        pifthenelsestatementnoshortifNode1 = new AIfThenElseStatementNoShortIf(tifNode2, pexpressionNode3, tthenNode4, pstatementnoshortifNode5, telseNode6, pstatementnoshortifNode7);
        }
	nodeList.add(pifthenelsestatementnoshortifNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce ATerminal$Declarations */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDeclarations pdeclarationsNode1;
        pdeclarationsNode1 = (PDeclarations)nodeArrayList1.get(0);
	if(pdeclarationsNode1 != null)
	{
	  listNode2.add(pdeclarationsNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ANonTerminal$Declarations */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDeclarations pdeclarationsNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeclarationsNode2 = (PDeclarations)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeclarationsNode2 != null)
	{
	  listNode3.add(pdeclarationsNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ATerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	if(pstatementNode1 != null)
	{
	  listNode2.add(pstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ANonTerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PStatement pstatementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstatementNode2 = (PStatement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstatementNode2 != null)
	{
	  listNode3.add(pstatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {8, SHIFT, 1}, },
			{{-1, ERROR, 1}, {38, SHIFT, 3}, },
			{{-1, ERROR, 2}, {39, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {36, SHIFT, 4}, },
			{{-1, ERROR, 4}, {2, SHIFT, 5}, {5, SHIFT, 6}, },
			{{-1, ERROR, 5}, {38, SHIFT, 9}, },
			{{-1, ERROR, 6}, {5, SHIFT, 10}, {6, SHIFT, 11}, {9, SHIFT, 12}, {12, SHIFT, 13}, {14, SHIFT, 14}, {15, SHIFT, 15}, {36, SHIFT, 16}, {38, SHIFT, 17}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 8}, {2, SHIFT, 5}, {5, SHIFT, 25}, },
			{{-1, ERROR, 9}, {35, SHIFT, 27}, },
			{{-1, ERROR, 10}, {5, SHIFT, 10}, {9, SHIFT, 12}, {12, SHIFT, 13}, {14, SHIFT, 14}, {15, SHIFT, 15}, {36, SHIFT, 16}, {38, SHIFT, 17}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 12}, {3, SHIFT, 29}, {32, SHIFT, 30}, {33, SHIFT, 31}, {34, SHIFT, 32}, {38, SHIFT, 33}, },
			{{-1, ERROR, 13}, {3, SHIFT, 29}, {32, SHIFT, 30}, {33, SHIFT, 31}, {34, SHIFT, 32}, {38, SHIFT, 33}, },
			{{-1, ERROR, 14}, {16, SHIFT, 39}, },
			{{-1, ERROR, 15}, {36, SHIFT, 40}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 17}, {4, SHIFT, 41}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 24}, {5, SHIFT, 10}, {6, SHIFT, 42}, {9, SHIFT, 12}, {12, SHIFT, 13}, {14, SHIFT, 14}, {15, SHIFT, 15}, {36, SHIFT, 16}, {38, SHIFT, 17}, },
			{{-1, ERROR, 25}, {5, SHIFT, 10}, {6, SHIFT, 44}, {9, SHIFT, 12}, {12, SHIFT, 13}, {14, SHIFT, 14}, {15, SHIFT, 15}, {36, SHIFT, 16}, {38, SHIFT, 17}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 27}, {0, SHIFT, 46}, {1, SHIFT, 47}, },
			{{-1, ERROR, 28}, {5, SHIFT, 10}, {7, SHIFT, 49}, {9, SHIFT, 12}, {12, SHIFT, 13}, {14, SHIFT, 14}, {15, SHIFT, 15}, {36, SHIFT, 16}, {38, SHIFT, 17}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 30}, {3, SHIFT, 29}, {32, SHIFT, 30}, {33, SHIFT, 31}, {34, SHIFT, 32}, {38, SHIFT, 33}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 34}, {10, SHIFT, 51}, {23, SHIFT, 52}, {24, SHIFT, 53}, {25, SHIFT, 54}, {26, SHIFT, 55}, {27, SHIFT, 56}, {28, SHIFT, 57}, },
			{{-1, REDUCE, 27}, {18, SHIFT, 59}, {19, SHIFT, 60}, {30, SHIFT, 61}, {31, SHIFT, 62}, },
			{{-1, REDUCE, 32}, {20, SHIFT, 63}, {21, SHIFT, 64}, {22, SHIFT, 65}, {29, SHIFT, 66}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 38}, {13, SHIFT, 67}, {23, SHIFT, 52}, {24, SHIFT, 53}, {25, SHIFT, 54}, {26, SHIFT, 55}, {27, SHIFT, 56}, {28, SHIFT, 57}, },
			{{-1, ERROR, 39}, {3, SHIFT, 29}, {32, SHIFT, 30}, {33, SHIFT, 31}, {34, SHIFT, 32}, {38, SHIFT, 33}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 41}, {3, SHIFT, 29}, {32, SHIFT, 30}, {33, SHIFT, 31}, {34, SHIFT, 32}, {38, SHIFT, 33}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 45}, {5, SHIFT, 10}, {6, SHIFT, 70}, {9, SHIFT, 12}, {12, SHIFT, 13}, {14, SHIFT, 14}, {15, SHIFT, 15}, {36, SHIFT, 16}, {38, SHIFT, 17}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 48}, {36, SHIFT, 71}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 51}, {5, SHIFT, 72}, {9, SHIFT, 73}, {12, SHIFT, 74}, {14, SHIFT, 14}, {15, SHIFT, 75}, {36, SHIFT, 76}, {38, SHIFT, 17}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 58}, {3, SHIFT, 29}, {32, SHIFT, 30}, {33, SHIFT, 31}, {34, SHIFT, 32}, {38, SHIFT, 33}, },
			{{-1, ERROR, 59}, {3, SHIFT, 29}, {32, SHIFT, 30}, {33, SHIFT, 31}, {34, SHIFT, 32}, {38, SHIFT, 33}, },
			{{-1, ERROR, 60}, {3, SHIFT, 29}, {32, SHIFT, 30}, {33, SHIFT, 31}, {34, SHIFT, 32}, {38, SHIFT, 33}, },
			{{-1, ERROR, 61}, {3, SHIFT, 29}, {32, SHIFT, 30}, {33, SHIFT, 31}, {34, SHIFT, 32}, {38, SHIFT, 33}, },
			{{-1, ERROR, 62}, {3, SHIFT, 29}, {32, SHIFT, 30}, {33, SHIFT, 31}, {34, SHIFT, 32}, {38, SHIFT, 33}, },
			{{-1, ERROR, 63}, {3, SHIFT, 29}, {32, SHIFT, 30}, {33, SHIFT, 31}, {34, SHIFT, 32}, {38, SHIFT, 33}, },
			{{-1, ERROR, 64}, {3, SHIFT, 29}, {32, SHIFT, 30}, {33, SHIFT, 31}, {34, SHIFT, 32}, {38, SHIFT, 33}, },
			{{-1, ERROR, 65}, {3, SHIFT, 29}, {32, SHIFT, 30}, {33, SHIFT, 31}, {34, SHIFT, 32}, {38, SHIFT, 33}, },
			{{-1, ERROR, 66}, {3, SHIFT, 29}, {32, SHIFT, 30}, {33, SHIFT, 31}, {34, SHIFT, 32}, {38, SHIFT, 33}, },
			{{-1, ERROR, 67}, {5, SHIFT, 10}, {9, SHIFT, 12}, {12, SHIFT, 13}, {14, SHIFT, 14}, {15, SHIFT, 15}, {36, SHIFT, 16}, {38, SHIFT, 17}, },
			{{-1, ERROR, 68}, {17, SHIFT, 93}, {23, SHIFT, 52}, {24, SHIFT, 53}, {25, SHIFT, 54}, {26, SHIFT, 55}, {27, SHIFT, 56}, {28, SHIFT, 57}, },
			{{-1, REDUCE, 23}, {23, SHIFT, 52}, {24, SHIFT, 53}, {25, SHIFT, 54}, {26, SHIFT, 55}, {27, SHIFT, 56}, {28, SHIFT, 57}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 72}, {5, SHIFT, 10}, {9, SHIFT, 12}, {12, SHIFT, 13}, {14, SHIFT, 14}, {15, SHIFT, 15}, {36, SHIFT, 16}, {38, SHIFT, 17}, },
			{{-1, ERROR, 73}, {3, SHIFT, 29}, {32, SHIFT, 30}, {33, SHIFT, 31}, {34, SHIFT, 32}, {38, SHIFT, 33}, },
			{{-1, ERROR, 74}, {3, SHIFT, 29}, {32, SHIFT, 30}, {33, SHIFT, 31}, {34, SHIFT, 32}, {38, SHIFT, 33}, },
			{{-1, REDUCE, 18}, {36, SHIFT, 40}, },
			{{-1, REDUCE, 12}, {11, REDUCE, 19}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 78}, {11, SHIFT, 97}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 9}, {11, REDUCE, 16}, },
			{{-1, REDUCE, 8}, {11, REDUCE, 15}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 26}, {18, SHIFT, 59}, {19, SHIFT, 60}, {30, SHIFT, 61}, {31, SHIFT, 62}, },
			{{-1, REDUCE, 28}, {20, SHIFT, 63}, {21, SHIFT, 64}, {22, SHIFT, 65}, {29, SHIFT, 66}, },
			{{-1, REDUCE, 29}, {20, SHIFT, 63}, {21, SHIFT, 64}, {22, SHIFT, 65}, {29, SHIFT, 66}, },
			{{-1, REDUCE, 30}, {20, SHIFT, 63}, {21, SHIFT, 64}, {22, SHIFT, 65}, {29, SHIFT, 66}, },
			{{-1, REDUCE, 31}, {20, SHIFT, 63}, {21, SHIFT, 64}, {22, SHIFT, 65}, {29, SHIFT, 66}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 94}, {5, SHIFT, 10}, {7, SHIFT, 98}, {9, SHIFT, 12}, {12, SHIFT, 13}, {14, SHIFT, 14}, {15, SHIFT, 15}, {36, SHIFT, 16}, {38, SHIFT, 17}, },
			{{-1, ERROR, 95}, {10, SHIFT, 99}, {23, SHIFT, 52}, {24, SHIFT, 53}, {25, SHIFT, 54}, {26, SHIFT, 55}, {27, SHIFT, 56}, {28, SHIFT, 57}, },
			{{-1, ERROR, 96}, {13, SHIFT, 100}, {23, SHIFT, 52}, {24, SHIFT, 53}, {25, SHIFT, 54}, {26, SHIFT, 55}, {27, SHIFT, 56}, {28, SHIFT, 57}, },
			{{-1, ERROR, 97}, {5, SHIFT, 10}, {9, SHIFT, 12}, {12, SHIFT, 13}, {14, SHIFT, 14}, {15, SHIFT, 15}, {36, SHIFT, 16}, {38, SHIFT, 17}, },
			{{-1, REDUCE, 10}, {11, REDUCE, 17}, },
			{{-1, ERROR, 99}, {5, SHIFT, 72}, {9, SHIFT, 73}, {12, SHIFT, 74}, {14, SHIFT, 14}, {15, SHIFT, 75}, {36, SHIFT, 76}, {38, SHIFT, 17}, },
			{{-1, ERROR, 100}, {5, SHIFT, 72}, {9, SHIFT, 73}, {12, SHIFT, 74}, {14, SHIFT, 14}, {15, SHIFT, 75}, {36, SHIFT, 76}, {38, SHIFT, 17}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 102}, {11, SHIFT, 104}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 104}, {5, SHIFT, 72}, {9, SHIFT, 73}, {12, SHIFT, 74}, {14, SHIFT, 14}, {15, SHIFT, 75}, {36, SHIFT, 76}, {38, SHIFT, 17}, },
			{{-1, REDUCE, 51}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 7}, {8, 26}, },
			{{-1, 18}, {24, 43}, {28, 43}, {45, 43}, {51, 77}, {67, 92}, {94, 43}, {97, 101}, {99, 77}, {100, 92}, {104, 101}, },
			{{-1, 78}, {99, 102}, {100, 103}, {104, 105}, },
			{{-1, 79}, },
			{{-1, 19}, },
			{{-1, 20}, {51, 80}, {99, 80}, {100, 80}, {104, 80}, },
			{{-1, 21}, {51, 81}, {99, 81}, {100, 81}, {104, 81}, },
			{{-1, 48}, },
			{{-1, 34}, {13, 38}, {39, 68}, {41, 69}, {73, 95}, {74, 96}, },
			{{-1, 35}, {58, 83}, },
			{{-1, 36}, {59, 84}, {60, 85}, {61, 86}, {62, 87}, },
			{{-1, 37}, {30, 50}, {63, 88}, {64, 89}, {65, 90}, {66, 91}, },
			{{-1, 58}, },
			{{-1, 22}, },
			{{-1, 23}, },
			{{-1, 82}, },
			{{-1, 8}, },
			{{-1, 24}, {10, 28}, {25, 45}, {72, 94}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: program",
			"expecting: identifier",
			"expecting: EOF",
			"expecting: ';'",
			"expecting: var, begin",
			"expecting: begin, programend, if, while, writeln, break, ';', identifier",
			"expecting: ':'",
			"expecting: begin, if, while, writeln, break, ';', identifier",
			"expecting: number, not, true, false, identifier",
			"expecting: '('",
			"expecting: begin, programend, end, if, while, writeln, break, ';', identifier",
			"expecting: ':='",
			"expecting: integer, boolean",
			"expecting: begin, end, if, while, writeln, break, ';', identifier",
			"expecting: begin, programend, end, if, then, else, while, do, writeln, break, ')', '+', '-', '*', div, mod, '=', '<', '>', '<=', '>=', '<>', and, or, xor, ';', identifier",
			"expecting: then, '=', '<', '>', '<=', '>=', '<>'",
			"expecting: begin, programend, end, if, then, else, while, do, writeln, break, ')', '+', '-', '=', '<', '>', '<=', '>=', '<>', or, xor, ';', identifier",
			"expecting: do, '=', '<', '>', '<=', '>=', '<>'",
			"expecting: ')', '=', '<', '>', '<=', '>=', '<>'",
			"expecting: begin, programend, end, if, else, while, writeln, break, '=', '<', '>', '<=', '>=', '<>', ';', identifier",
			"expecting: else, ';'",
			"expecting: begin, programend, end, if, else, while, writeln, break, ';', identifier",
			"expecting: else",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 1, 5, 4, 4, 6, 7, 2, 8, 8, 9, 3, 10, 11, 10, 10, 10, 10, 10, 10, 5, 5, 4, 12, 13, 14, 8, 14, 14, 14, 15, 16, 14, 14, 17, 8, 10, 8, 2, 10, 2, 5, 3, 3, 3, 10, 14, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 18, 19, 2, 4, 7, 8, 8, 20, 21, 10, 22, 22, 21, 21, 22, 16, 14, 14, 14, 14, 14, 14, 14, 14, 10, 21, 13, 15, 17, 7, 21, 7, 7, 10, 22, 22, 7, 22, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
