/* This file was generated by SableCC (http://www.sablecc.org/). */

package parser;

import lexer.*;
import node.*;
import analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PExpr node1 = (PExpr) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAstart1Start */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAstart2Start */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce ADeclaration */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list);
            }
            break;
            case 3: /* reduce AMultIdentifierList */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list);
            }
            break;
            case 4: /* reduce AIdentifierList */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list);
            }
            break;
            case 5: /* reduce AAmultstatementlist1StatementList */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list);
            }
            break;
            case 6: /* reduce AAmultstatementlist2StatementList */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list);
            }
            break;
            case 7: /* reduce AAstatementlist1StatementList */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list);
            }
            break;
            case 8: /* reduce AAstatementlist2StatementList */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list);
            }
            break;
            case 9: /* reduce AIfThenStatementStatement */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list);
            }
            break;
            case 10: /* reduce AIfThenElseStatementStatement */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list);
            }
            break;
            case 11: /* reduce AWhileStatement */
            {
                ArrayList<Object> list = new11();
                push(goTo(4), list);
            }
            break;
            case 12: /* reduce AAssignStatement */
            {
                ArrayList<Object> list = new12();
                push(goTo(4), list);
            }
            break;
            case 13: /* reduce APrintStatement */
            {
                ArrayList<Object> list = new13();
                push(goTo(4), list);
            }
            break;
            case 14: /* reduce ANestedStatement */
            {
                ArrayList<Object> list = new14();
                push(goTo(4), list);
            }
            break;
            case 15: /* reduce ABreakStatement */
            {
                ArrayList<Object> list = new15();
                push(goTo(4), list);
            }
            break;
            case 16: /* reduce AIfStatementNoShortIf */
            {
                ArrayList<Object> list = new16();
                push(goTo(5), list);
            }
            break;
            case 17: /* reduce AWhileStatementNoShortIf */
            {
                ArrayList<Object> list = new17();
                push(goTo(5), list);
            }
            break;
            case 18: /* reduce AAssignStatementNoShortIf */
            {
                ArrayList<Object> list = new18();
                push(goTo(5), list);
            }
            break;
            case 19: /* reduce APrintStatementNoShortIf */
            {
                ArrayList<Object> list = new19();
                push(goTo(5), list);
            }
            break;
            case 20: /* reduce ANestedStatementNoShortIf */
            {
                ArrayList<Object> list = new20();
                push(goTo(5), list);
            }
            break;
            case 21: /* reduce ABreakStatementNoShortIf */
            {
                ArrayList<Object> list = new21();
                push(goTo(5), list);
            }
            break;
            case 22: /* reduce AWhileWhileStatementNoShortIf */
            {
                ArrayList<Object> list = new22();
                push(goTo(6), list);
            }
            break;
            case 23: /* reduce AWhileWhileStatement */
            {
                ArrayList<Object> list = new23();
                push(goTo(7), list);
            }
            break;
            case 24: /* reduce APrint */
            {
                ArrayList<Object> list = new24();
                push(goTo(8), list);
            }
            break;
            case 25: /* reduce AAssignment */
            {
                ArrayList<Object> list = new25();
                push(goTo(9), list);
            }
            break;
            case 26: /* reduce ABooleanType */
            {
                ArrayList<Object> list = new26();
                push(goTo(10), list);
            }
            break;
            case 27: /* reduce AIntegerType */
            {
                ArrayList<Object> list = new27();
                push(goTo(10), list);
            }
            break;
            case 28: /* reduce AComparisonExpression */
            {
                ArrayList<Object> list = new28();
                push(goTo(11), list);
            }
            break;
            case 29: /* reduce AExpression */
            {
                ArrayList<Object> list = new29();
                push(goTo(11), list);
            }
            break;
            case 30: /* reduce APlusExpression2 */
            {
                ArrayList<Object> list = new30();
                push(goTo(12), list);
            }
            break;
            case 31: /* reduce AMinusExpression2 */
            {
                ArrayList<Object> list = new31();
                push(goTo(12), list);
            }
            break;
            case 32: /* reduce AOrExpression2 */
            {
                ArrayList<Object> list = new32();
                push(goTo(12), list);
            }
            break;
            case 33: /* reduce AXorExpression2 */
            {
                ArrayList<Object> list = new33();
                push(goTo(12), list);
            }
            break;
            case 34: /* reduce AExpression2 */
            {
                ArrayList<Object> list = new34();
                push(goTo(12), list);
            }
            break;
            case 35: /* reduce AModExpression3 */
            {
                ArrayList<Object> list = new35();
                push(goTo(13), list);
            }
            break;
            case 36: /* reduce AMultExpression3 */
            {
                ArrayList<Object> list = new36();
                push(goTo(13), list);
            }
            break;
            case 37: /* reduce ADivExpression3 */
            {
                ArrayList<Object> list = new37();
                push(goTo(13), list);
            }
            break;
            case 38: /* reduce AAndExpression3 */
            {
                ArrayList<Object> list = new38();
                push(goTo(13), list);
            }
            break;
            case 39: /* reduce AExpression3 */
            {
                ArrayList<Object> list = new39();
                push(goTo(13), list);
            }
            break;
            case 40: /* reduce ANotExpression4 */
            {
                ArrayList<Object> list = new40();
                push(goTo(14), list);
            }
            break;
            case 41: /* reduce ABracketsExpression4 */
            {
                ArrayList<Object> list = new41();
                push(goTo(14), list);
            }
            break;
            case 42: /* reduce AUnaryMinusExpression4 */
            {
                ArrayList<Object> list = new42();
                push(goTo(14), list);
            }
            break;
            case 43: /* reduce AUnaryPlusExpression4 */
            {
                ArrayList<Object> list = new43();
                push(goTo(14), list);
            }
            break;
            case 44: /* reduce ANumberExpression4 */
            {
                ArrayList<Object> list = new44();
                push(goTo(14), list);
            }
            break;
            case 45: /* reduce AIdentifierExpression4 */
            {
                ArrayList<Object> list = new45();
                push(goTo(14), list);
            }
            break;
            case 46: /* reduce ATrueExpression4 */
            {
                ArrayList<Object> list = new46();
                push(goTo(14), list);
            }
            break;
            case 47: /* reduce AFalseExpression4 */
            {
                ArrayList<Object> list = new47();
                push(goTo(14), list);
            }
            break;
            case 48: /* reduce AGtComparison */
            {
                ArrayList<Object> list = new48();
                push(goTo(15), list);
            }
            break;
            case 49: /* reduce AGeComparison */
            {
                ArrayList<Object> list = new49();
                push(goTo(15), list);
            }
            break;
            case 50: /* reduce ALtComparison */
            {
                ArrayList<Object> list = new50();
                push(goTo(15), list);
            }
            break;
            case 51: /* reduce ALeComparison */
            {
                ArrayList<Object> list = new51();
                push(goTo(15), list);
            }
            break;
            case 52: /* reduce ANeComparison */
            {
                ArrayList<Object> list = new52();
                push(goTo(15), list);
            }
            break;
            case 53: /* reduce AEqComparison */
            {
                ArrayList<Object> list = new53();
                push(goTo(15), list);
            }
            break;
            case 54: /* reduce AIfThenStatement */
            {
                ArrayList<Object> list = new54();
                push(goTo(16), list);
            }
            break;
            case 55: /* reduce AIfThenElseStatement */
            {
                ArrayList<Object> list = new55();
                push(goTo(17), list);
            }
            break;
            case 56: /* reduce AIfThenElseStatementNoShortIf */
            {
                ArrayList<Object> list = new56();
                push(goTo(18), list);
            }
            break;
            case 57: /* reduce ATerminal$Declaration */
            {
                ArrayList<Object> list = new57();
                push(goTo(19), list);
            }
            break;
            case 58: /* reduce ANonTerminal$Declaration */
            {
                ArrayList<Object> list = new58();
                push(goTo(19), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAstart1Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PExpr pexprNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        }
        pexprNode4 = (PExpr)nodeArrayList5.get(0);

        pexprNode1 = new AStartExpr(tidentifierNode2, listNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAstart2Start */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PExpr pexprNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pexprNode5 = (PExpr)nodeArrayList6.get(0);

        pexprNode1 = new AStartExpr(tidentifierNode2, listNode4, pexprNode5);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ADeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList2.get(0);
        pexprNode3 = (PExpr)nodeArrayList4.get(0);

        pexprNode1 = new ADeclarationExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AMultIdentifierList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TIdentifier tidentifierNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList3.get(0);

        pexprNode1 = new AIdentifierListExpr(pexprNode2, tidentifierNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AIdentifierList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pexprNode1 = new AIdentifierExpr(tidentifierNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAmultstatementlist1StatementList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block
        }

        pexprNode1 = new AStatementListExpr(pexprNode2, listNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAmultstatementlist2StatementList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block
        PExpr pexprNode3;
        pexprNode3 = (PExpr)nodeArrayList3.get(0);
	if(pexprNode3 != null)
	{
	  listNode4.add(pexprNode3);
	}
        }

        pexprNode1 = new AStatementListExpr(pexprNode2, listNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAstatementlist1StatementList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PExpr pexprNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        pexprNode1 = new AStatementExpr(listNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AAstatementlist2StatementList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
	if(pexprNode2 != null)
	{
	  listNode3.add(pexprNode2);
	}
        }

        pexprNode1 = new AStatementExpr(listNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AIfThenStatementStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AIfThenElseStatementStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AWhileStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAssignStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce APrintStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ANestedStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList2.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ABreakStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TBreak tbreakNode2;
        tbreakNode2 = (TBreak)nodeArrayList1.get(0);

        pexprNode1 = new ABreakExpr(tbreakNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AIfStatementNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AWhileStatementNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAssignStatementNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce APrintStatementNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ANestedStatementNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList2.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ABreakStatementNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TBreak tbreakNode2;
        tbreakNode2 = (TBreak)nodeArrayList1.get(0);

        pexprNode1 = new ABreakExpr(tbreakNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AWhileWhileStatementNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList2.get(0);
        pexprNode3 = (PExpr)nodeArrayList4.get(0);

        pexprNode1 = new AWhileExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AWhileWhileStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList2.get(0);
        pexprNode3 = (PExpr)nodeArrayList4.get(0);

        pexprNode1 = new AWhileExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce APrint */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new APrintExpr(pexprNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAssignment */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PExpr pexprNode3;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AAssignmentExpr(tidentifierNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ABooleanType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TBoolean tbooleanNode2;
        tbooleanNode2 = (TBoolean)nodeArrayList1.get(0);

        pexprNode1 = new ABooleanExpr(tbooleanNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AIntegerType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TInteger tintegerNode2;
        tintegerNode2 = (TInteger)nodeArrayList1.get(0);

        pexprNode1 = new AIntegerExpr(tintegerNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AComparisonExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        PExpr pexprNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AComparisonExpr(pexprNode2, pexprNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce APlusExpression2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new APlusExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AMinusExpression2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AMinusExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AOrExpression2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AOrExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AXorExpression2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AXorExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AExpression2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AModExpression3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AModExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AMultExpression3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AMultExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce ADivExpression3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new ADivExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AAndExpression3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AAndExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AExpression3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ANotExpression4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList2.get(0);

        pexprNode1 = new ANotExpr(pexprNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ABracketsExpression4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList2.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AUnaryMinusExpression4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList2.get(0);

        pexprNode1 = new AUnaryMinusExpr(pexprNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AUnaryPlusExpression4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList2.get(0);

        pexprNode1 = new AUnaryPlusExpr(pexprNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce ANumberExpression4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pexprNode1 = new ANumberExpr(tnumberNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AIdentifierExpression4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pexprNode1 = new AIdentifierExpr(tidentifierNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce ATrueExpression4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pexprNode1 = new ATrueExpr(ttrueNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AFalseExpression4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pexprNode1 = new AFalseExpr(tfalseNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AGtComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TGt tgtNode2;
        tgtNode2 = (TGt)nodeArrayList1.get(0);

        pexprNode1 = new AGtExpr(tgtNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AGeComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TGe tgeNode2;
        tgeNode2 = (TGe)nodeArrayList1.get(0);

        pexprNode1 = new AGeExpr(tgeNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ALtComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TLt tltNode2;
        tltNode2 = (TLt)nodeArrayList1.get(0);

        pexprNode1 = new ALtExpr(tltNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ALeComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TLe tleNode2;
        tleNode2 = (TLe)nodeArrayList1.get(0);

        pexprNode1 = new ALeExpr(tleNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce ANeComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TNe tneNode2;
        tneNode2 = (TNe)nodeArrayList1.get(0);

        pexprNode1 = new ANeExpr(tneNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AEqComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TEq teqNode2;
        teqNode2 = (TEq)nodeArrayList1.get(0);

        pexprNode1 = new AEqExpr(teqNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AIfThenStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList2.get(0);
        pexprNode3 = (PExpr)nodeArrayList4.get(0);

        pexprNode1 = new AIfThenExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AIfThenElseStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        PExpr pexprNode4;
        pexprNode2 = (PExpr)nodeArrayList2.get(0);
        pexprNode3 = (PExpr)nodeArrayList4.get(0);
        pexprNode4 = (PExpr)nodeArrayList6.get(0);

        pexprNode1 = new AIfThenElseExpr(pexprNode2, pexprNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AIfThenElseStatementNoShortIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        PExpr pexprNode4;
        pexprNode2 = (PExpr)nodeArrayList2.get(0);
        pexprNode3 = (PExpr)nodeArrayList4.get(0);
        pexprNode4 = (PExpr)nodeArrayList6.get(0);

        pexprNode1 = new AIfThenElseExpr(pexprNode2, pexprNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ATerminal$Declaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	if(pexprNode1 != null)
	{
	  listNode2.add(pexprNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ANonTerminal$Declaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExpr pexprNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexprNode2 = (PExpr)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexprNode2 != null)
	{
	  listNode3.add(pexprNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {7, SHIFT, 1}, },
			{{-1, ERROR, 1}, {38, SHIFT, 3}, },
			{{-1, ERROR, 2}, {39, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {35, SHIFT, 4}, },
			{{-1, ERROR, 4}, {2, SHIFT, 5}, {5, SHIFT, 6}, },
			{{-1, ERROR, 5}, {38, SHIFT, 9}, },
			{{-1, REDUCE, 7}, {5, SHIFT, 11}, {8, SHIFT, 12}, {11, SHIFT, 13}, {13, SHIFT, 14}, {14, SHIFT, 15}, {38, SHIFT, 16}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 8}, {2, SHIFT, 5}, {5, SHIFT, 24}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 10}, {34, SHIFT, 26}, {37, SHIFT, 27}, },
			{{-1, REDUCE, 7}, {5, SHIFT, 11}, {8, SHIFT, 12}, {11, SHIFT, 13}, {13, SHIFT, 14}, {14, SHIFT, 15}, {38, SHIFT, 16}, },
			{{-1, ERROR, 12}, {3, SHIFT, 29}, {15, SHIFT, 30}, {17, SHIFT, 31}, {18, SHIFT, 32}, {31, SHIFT, 33}, {32, SHIFT, 34}, {33, SHIFT, 35}, {38, SHIFT, 36}, },
			{{-1, ERROR, 13}, {3, SHIFT, 29}, {15, SHIFT, 30}, {17, SHIFT, 31}, {18, SHIFT, 32}, {31, SHIFT, 33}, {32, SHIFT, 34}, {33, SHIFT, 35}, {38, SHIFT, 36}, },
			{{-1, ERROR, 14}, {15, SHIFT, 42}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 16}, {4, SHIFT, 43}, },
			{{-1, ERROR, 17}, {6, SHIFT, 44}, {35, SHIFT, 45}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 7}, {5, SHIFT, 11}, {8, SHIFT, 12}, {11, SHIFT, 13}, {13, SHIFT, 14}, {14, SHIFT, 15}, {38, SHIFT, 16}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 26}, {0, SHIFT, 47}, {1, SHIFT, 48}, },
			{{-1, ERROR, 27}, {38, SHIFT, 50}, },
			{{-1, ERROR, 28}, {6, SHIFT, 51}, {35, SHIFT, 45}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 30}, {3, SHIFT, 29}, {15, SHIFT, 30}, {17, SHIFT, 31}, {18, SHIFT, 32}, {31, SHIFT, 33}, {32, SHIFT, 34}, {33, SHIFT, 35}, {38, SHIFT, 36}, },
			{{-1, ERROR, 31}, {3, SHIFT, 29}, {15, SHIFT, 30}, {17, SHIFT, 31}, {18, SHIFT, 32}, {31, SHIFT, 33}, {32, SHIFT, 34}, {33, SHIFT, 35}, {38, SHIFT, 36}, },
			{{-1, ERROR, 32}, {3, SHIFT, 29}, {15, SHIFT, 30}, {17, SHIFT, 31}, {18, SHIFT, 32}, {31, SHIFT, 33}, {32, SHIFT, 34}, {33, SHIFT, 35}, {38, SHIFT, 36}, },
			{{-1, ERROR, 33}, {3, SHIFT, 29}, {15, SHIFT, 30}, {17, SHIFT, 31}, {18, SHIFT, 32}, {31, SHIFT, 33}, {32, SHIFT, 34}, {33, SHIFT, 35}, {38, SHIFT, 36}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 37}, {9, SHIFT, 56}, {20, SHIFT, 57}, {21, SHIFT, 58}, {22, SHIFT, 59}, {23, SHIFT, 60}, {24, SHIFT, 61}, {25, SHIFT, 62}, },
			{{-1, REDUCE, 29}, {17, SHIFT, 64}, {18, SHIFT, 65}, {29, SHIFT, 66}, {30, SHIFT, 67}, },
			{{-1, REDUCE, 34}, {19, SHIFT, 68}, {26, SHIFT, 69}, {27, SHIFT, 70}, {28, SHIFT, 71}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 41}, {12, SHIFT, 72}, {20, SHIFT, 57}, {21, SHIFT, 58}, {22, SHIFT, 59}, {23, SHIFT, 60}, {24, SHIFT, 61}, {25, SHIFT, 62}, },
			{{-1, ERROR, 42}, {3, SHIFT, 29}, {15, SHIFT, 30}, {17, SHIFT, 31}, {18, SHIFT, 32}, {31, SHIFT, 33}, {32, SHIFT, 34}, {33, SHIFT, 35}, {38, SHIFT, 36}, },
			{{-1, ERROR, 43}, {3, SHIFT, 29}, {15, SHIFT, 30}, {17, SHIFT, 31}, {18, SHIFT, 32}, {31, SHIFT, 33}, {32, SHIFT, 34}, {33, SHIFT, 35}, {38, SHIFT, 36}, },
			{{-1, ERROR, 44}, {36, SHIFT, 75}, },
			{{-1, REDUCE, 5}, {5, SHIFT, 11}, {8, SHIFT, 12}, {11, SHIFT, 13}, {13, SHIFT, 14}, {14, SHIFT, 15}, {38, SHIFT, 16}, },
			{{-1, ERROR, 46}, {6, SHIFT, 77}, {35, SHIFT, 45}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 49}, {35, SHIFT, 78}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 52}, {16, SHIFT, 79}, {20, SHIFT, 57}, {21, SHIFT, 58}, {22, SHIFT, 59}, {23, SHIFT, 60}, {24, SHIFT, 61}, {25, SHIFT, 62}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 56}, {5, SHIFT, 80}, {8, SHIFT, 81}, {11, SHIFT, 82}, {13, SHIFT, 14}, {14, SHIFT, 83}, {38, SHIFT, 16}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 63}, {3, SHIFT, 29}, {15, SHIFT, 30}, {17, SHIFT, 31}, {18, SHIFT, 32}, {31, SHIFT, 33}, {32, SHIFT, 34}, {33, SHIFT, 35}, {38, SHIFT, 36}, },
			{{-1, ERROR, 64}, {3, SHIFT, 29}, {15, SHIFT, 30}, {17, SHIFT, 31}, {18, SHIFT, 32}, {31, SHIFT, 33}, {32, SHIFT, 34}, {33, SHIFT, 35}, {38, SHIFT, 36}, },
			{{-1, ERROR, 65}, {3, SHIFT, 29}, {15, SHIFT, 30}, {17, SHIFT, 31}, {18, SHIFT, 32}, {31, SHIFT, 33}, {32, SHIFT, 34}, {33, SHIFT, 35}, {38, SHIFT, 36}, },
			{{-1, ERROR, 66}, {3, SHIFT, 29}, {15, SHIFT, 30}, {17, SHIFT, 31}, {18, SHIFT, 32}, {31, SHIFT, 33}, {32, SHIFT, 34}, {33, SHIFT, 35}, {38, SHIFT, 36}, },
			{{-1, ERROR, 67}, {3, SHIFT, 29}, {15, SHIFT, 30}, {17, SHIFT, 31}, {18, SHIFT, 32}, {31, SHIFT, 33}, {32, SHIFT, 34}, {33, SHIFT, 35}, {38, SHIFT, 36}, },
			{{-1, ERROR, 68}, {3, SHIFT, 29}, {15, SHIFT, 30}, {17, SHIFT, 31}, {18, SHIFT, 32}, {31, SHIFT, 33}, {32, SHIFT, 34}, {33, SHIFT, 35}, {38, SHIFT, 36}, },
			{{-1, ERROR, 69}, {3, SHIFT, 29}, {15, SHIFT, 30}, {17, SHIFT, 31}, {18, SHIFT, 32}, {31, SHIFT, 33}, {32, SHIFT, 34}, {33, SHIFT, 35}, {38, SHIFT, 36}, },
			{{-1, ERROR, 70}, {3, SHIFT, 29}, {15, SHIFT, 30}, {17, SHIFT, 31}, {18, SHIFT, 32}, {31, SHIFT, 33}, {32, SHIFT, 34}, {33, SHIFT, 35}, {38, SHIFT, 36}, },
			{{-1, ERROR, 71}, {3, SHIFT, 29}, {15, SHIFT, 30}, {17, SHIFT, 31}, {18, SHIFT, 32}, {31, SHIFT, 33}, {32, SHIFT, 34}, {33, SHIFT, 35}, {38, SHIFT, 36}, },
			{{-1, ERROR, 72}, {5, SHIFT, 11}, {8, SHIFT, 12}, {11, SHIFT, 13}, {13, SHIFT, 14}, {14, SHIFT, 15}, {38, SHIFT, 16}, },
			{{-1, ERROR, 73}, {16, SHIFT, 100}, {20, SHIFT, 57}, {21, SHIFT, 58}, {22, SHIFT, 59}, {23, SHIFT, 60}, {24, SHIFT, 61}, {25, SHIFT, 62}, },
			{{-1, REDUCE, 25}, {20, SHIFT, 57}, {21, SHIFT, 58}, {22, SHIFT, 59}, {23, SHIFT, 60}, {24, SHIFT, 61}, {25, SHIFT, 62}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 77}, {36, SHIFT, 101}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 7}, {5, SHIFT, 11}, {8, SHIFT, 12}, {11, SHIFT, 13}, {13, SHIFT, 14}, {14, SHIFT, 15}, {38, SHIFT, 16}, },
			{{-1, ERROR, 81}, {3, SHIFT, 29}, {15, SHIFT, 30}, {17, SHIFT, 31}, {18, SHIFT, 32}, {31, SHIFT, 33}, {32, SHIFT, 34}, {33, SHIFT, 35}, {38, SHIFT, 36}, },
			{{-1, ERROR, 82}, {3, SHIFT, 29}, {15, SHIFT, 30}, {17, SHIFT, 31}, {18, SHIFT, 32}, {31, SHIFT, 33}, {32, SHIFT, 34}, {33, SHIFT, 35}, {38, SHIFT, 36}, },
			{{-1, REDUCE, 15}, {10, REDUCE, 21}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 85}, {10, SHIFT, 105}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 13}, {10, REDUCE, 19}, },
			{{-1, REDUCE, 12}, {10, REDUCE, 18}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 28}, {17, SHIFT, 64}, {18, SHIFT, 65}, {29, SHIFT, 66}, {30, SHIFT, 67}, },
			{{-1, REDUCE, 30}, {19, SHIFT, 68}, {26, SHIFT, 69}, {27, SHIFT, 70}, {28, SHIFT, 71}, },
			{{-1, REDUCE, 31}, {19, SHIFT, 68}, {26, SHIFT, 69}, {27, SHIFT, 70}, {28, SHIFT, 71}, },
			{{-1, REDUCE, 33}, {19, SHIFT, 68}, {26, SHIFT, 69}, {27, SHIFT, 70}, {28, SHIFT, 71}, },
			{{-1, REDUCE, 32}, {19, SHIFT, 68}, {26, SHIFT, 69}, {27, SHIFT, 70}, {28, SHIFT, 71}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 102}, {6, SHIFT, 106}, {35, SHIFT, 45}, },
			{{-1, ERROR, 103}, {9, SHIFT, 107}, {20, SHIFT, 57}, {21, SHIFT, 58}, {22, SHIFT, 59}, {23, SHIFT, 60}, {24, SHIFT, 61}, {25, SHIFT, 62}, },
			{{-1, ERROR, 104}, {12, SHIFT, 108}, {20, SHIFT, 57}, {21, SHIFT, 58}, {22, SHIFT, 59}, {23, SHIFT, 60}, {24, SHIFT, 61}, {25, SHIFT, 62}, },
			{{-1, ERROR, 105}, {5, SHIFT, 11}, {8, SHIFT, 12}, {11, SHIFT, 13}, {13, SHIFT, 14}, {14, SHIFT, 15}, {38, SHIFT, 16}, },
			{{-1, REDUCE, 14}, {10, REDUCE, 20}, },
			{{-1, ERROR, 107}, {5, SHIFT, 80}, {8, SHIFT, 81}, {11, SHIFT, 82}, {13, SHIFT, 14}, {14, SHIFT, 83}, {38, SHIFT, 16}, },
			{{-1, ERROR, 108}, {5, SHIFT, 80}, {8, SHIFT, 81}, {11, SHIFT, 82}, {13, SHIFT, 14}, {14, SHIFT, 83}, {38, SHIFT, 16}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 110}, {10, SHIFT, 112}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 112}, {5, SHIFT, 80}, {8, SHIFT, 81}, {11, SHIFT, 82}, {13, SHIFT, 14}, {14, SHIFT, 83}, {38, SHIFT, 16}, },
			{{-1, REDUCE, 56}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 7}, {8, 25}, },
			{{-1, 10}, },
			{{-1, 17}, {11, 28}, {24, 46}, {80, 102}, },
			{{-1, 18}, {45, 76}, {56, 84}, {72, 99}, {105, 109}, {107, 84}, {108, 99}, {112, 109}, },
			{{-1, 85}, {107, 110}, {108, 111}, {112, 113}, },
			{{-1, 86}, },
			{{-1, 19}, },
			{{-1, 20}, {56, 87}, {107, 87}, {108, 87}, {112, 87}, },
			{{-1, 21}, {56, 88}, {107, 88}, {108, 88}, {112, 88}, },
			{{-1, 49}, },
			{{-1, 37}, {13, 41}, {30, 52}, {42, 73}, {43, 74}, {81, 103}, {82, 104}, },
			{{-1, 38}, {63, 90}, },
			{{-1, 39}, {64, 91}, {65, 92}, {66, 93}, {67, 94}, },
			{{-1, 40}, {31, 53}, {32, 54}, {33, 55}, {68, 95}, {69, 96}, {70, 97}, {71, 98}, },
			{{-1, 63}, },
			{{-1, 22}, },
			{{-1, 23}, },
			{{-1, 89}, },
			{{-1, 8}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: program",
			"expecting: identifier",
			"expecting: EOF",
			"expecting: ';'",
			"expecting: var, begin",
			"expecting: begin, end, if, while, writeln, break, ';', identifier",
			"expecting: ':', ','",
			"expecting: number, '(', '+', '-', not, true, false, identifier",
			"expecting: '('",
			"expecting: end, ';'",
			"expecting: ':='",
			"expecting: integer, boolean",
			"expecting: end, then, else, do, ')', '+', '-', '*', '=', '<', '>', '<=', '>=', '<>', div, mod, and, xor, or, ';'",
			"expecting: then, '=', '<', '>', '<=', '>=', '<>'",
			"expecting: end, then, else, do, ')', '+', '-', '=', '<', '>', '<=', '>=', '<>', xor, or, ';'",
			"expecting: do, '=', '<', '>', '<=', '>=', '<>'",
			"expecting: '.'",
			"expecting: ')', '=', '<', '>', '<=', '>=', '<>'",
			"expecting: begin, if, while, writeln, break, identifier",
			"expecting: end, else, '=', '<', '>', '<=', '>=', '<>', ';'",
			"expecting: end, else, ';'",
			"expecting: else",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 1, 5, 4, 4, 6, 6, 5, 7, 7, 8, 9, 10, 9, 9, 9, 9, 9, 9, 9, 5, 4, 11, 1, 9, 12, 7, 7, 7, 7, 12, 12, 12, 13, 14, 12, 12, 15, 7, 7, 16, 5, 9, 3, 3, 3, 6, 9, 17, 12, 12, 12, 18, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 18, 17, 19, 2, 9, 16, 4, 12, 5, 7, 7, 20, 9, 21, 21, 20, 20, 21, 14, 12, 12, 12, 12, 12, 12, 12, 12, 9, 20, 2, 9, 13, 15, 18, 20, 18, 18, 9, 21, 21, 18, 21, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
