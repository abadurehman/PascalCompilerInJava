/* This file was generated by SableCC (http://www.sablecc.org/). */

package lexer;

import java.io.*;
import node.*;

@SuppressWarnings("nls")
public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private IPushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    @SuppressWarnings("unused")
    protected void filter() throws LexerException, IOException
    {
        // Do nothing
    }

    public Lexer(@SuppressWarnings("hiding") final PushbackReader in)
    {
        this.in = new IPushbackReader() {

            private PushbackReader pushbackReader = in;
            
            @Override
            public void unread(int c) throws IOException {
                pushbackReader.unread(c);
            }
            
            @Override
            public int read() throws IOException {
                return pushbackReader.read();
            }
        };
    }
 
    public Lexer(@SuppressWarnings("hiding") IPushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        return this.token;
    }

    public Token next() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        Token result = this.token;
        this.token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = this.pos;
        int start_line = this.line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        @SuppressWarnings("hiding") int[][][] gotoTable = Lexer.gotoTable[this.state.id()];
        @SuppressWarnings("hiding") int[] accept = Lexer.accept[this.state.id()];
        this.text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(this.cr)
                    {
                        this.cr = false;
                    }
                    else
                    {
                        this.line++;
                        this.pos = 0;
                    }
                    break;
                case 13:
                    this.line++;
                    this.pos = 0;
                    this.cr = true;
                    break;
                default:
                    this.pos++;
                    this.cr = false;
                    break;
                }

                this.text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        // int middle = (low + high) / 2;
                        int middle = (low + high) >>> 1;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = this.text.length();
                    accept_pos = this.pos;
                    accept_line = this.line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            @SuppressWarnings("hiding") Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            @SuppressWarnings("hiding") Token token = new1(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            @SuppressWarnings("hiding") Token token = new2(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            @SuppressWarnings("hiding") Token token = new3(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            @SuppressWarnings("hiding") Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            @SuppressWarnings("hiding") Token token = new5(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            @SuppressWarnings("hiding") Token token = new6(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            @SuppressWarnings("hiding") Token token = new7(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            @SuppressWarnings("hiding") Token token = new8(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            @SuppressWarnings("hiding") Token token = new9(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            @SuppressWarnings("hiding") Token token = new10(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            @SuppressWarnings("hiding") Token token = new11(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            @SuppressWarnings("hiding") Token token = new12(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            @SuppressWarnings("hiding") Token token = new13(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            @SuppressWarnings("hiding") Token token = new14(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            @SuppressWarnings("hiding") Token token = new15(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            @SuppressWarnings("hiding") Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            @SuppressWarnings("hiding") Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            @SuppressWarnings("hiding") Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            @SuppressWarnings("hiding") Token token = new19(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            @SuppressWarnings("hiding") Token token = new20(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            @SuppressWarnings("hiding") Token token = new21(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            @SuppressWarnings("hiding") Token token = new22(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            @SuppressWarnings("hiding") Token token = new23(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            @SuppressWarnings("hiding") Token token = new24(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            @SuppressWarnings("hiding") Token token = new25(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            @SuppressWarnings("hiding") Token token = new26(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            @SuppressWarnings("hiding") Token token = new27(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            @SuppressWarnings("hiding") Token token = new28(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            @SuppressWarnings("hiding") Token token = new29(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            @SuppressWarnings("hiding") Token token = new30(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            @SuppressWarnings("hiding") Token token = new31(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            @SuppressWarnings("hiding") Token token = new32(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            @SuppressWarnings("hiding") Token token = new33(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            @SuppressWarnings("hiding") Token token = new34(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 35:
                        {
                            @SuppressWarnings("hiding") Token token = new35(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 36:
                        {
                            @SuppressWarnings("hiding") Token token = new36(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 37:
                        {
                            @SuppressWarnings("hiding") Token token = new37(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 38:
                        {
                            @SuppressWarnings("hiding") Token token = new38(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 39:
                        {
                            @SuppressWarnings("hiding") Token token = new39(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 40:
                        {
                            @SuppressWarnings("hiding") Token token = new40(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(this.text.length() > 0)
                    {
                        throw new LexerException(
                            new InvalidToken(this.text.substring(0, 1), start_line + 1, start_pos + 1),
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + this.text);
                    }

                    @SuppressWarnings("hiding") EOF token = new EOF(
                        start_line + 1,
                        start_pos + 1);
                    return token;
                }
            }
        }
    }

    Token new0(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TInteger(text, line, pos); }
    Token new1(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBoolean(text, line, pos); }
    Token new2(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TVar(text, line, pos); }
    Token new3(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNumber(text, line, pos); }
    Token new4(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TAssign(line, pos); }
    Token new5(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBegin(text, line, pos); }
    Token new6(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TProgramend(text, line, pos); }
    Token new7(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEnd(text, line, pos); }
    Token new8(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TProgram(text, line, pos); }
    Token new9(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIf(text, line, pos); }
    Token new10(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TThen(text, line, pos); }
    Token new11(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TElse(text, line, pos); }
    Token new12(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TWhile(text, line, pos); }
    Token new13(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDo(text, line, pos); }
    Token new14(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TWriteln(text, line, pos); }
    Token new15(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBreak(text, line, pos); }
    Token new16(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLPar(line, pos); }
    Token new17(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRPar(line, pos); }
    Token new18(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TPlus(line, pos); }
    Token new19(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TMinus(line, pos); }
    Token new20(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TMult(line, pos); }
    Token new21(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEq(line, pos); }
    Token new22(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLt(line, pos); }
    Token new23(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TGt(line, pos); }
    Token new24(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLe(line, pos); }
    Token new25(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TGe(line, pos); }
    Token new26(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNe(line, pos); }
    Token new27(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDiv(text, line, pos); }
    Token new28(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TMod(text, line, pos); }
    Token new29(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TAnd(text, line, pos); }
    Token new30(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TXor(text, line, pos); }
    Token new31(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOr(text, line, pos); }
    Token new32(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNot(text, line, pos); }
    Token new33(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTrue(text, line, pos); }
    Token new34(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TFalse(text, line, pos); }
    Token new35(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TColon(line, pos); }
    Token new36(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSemicolon(line, pos); }
    Token new37(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDot(line, pos); }
    Token new38(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TComma(line, pos); }
    Token new39(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBlankOrComment(text, line, pos); }
    Token new40(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIdentifier(text, line, pos); }

    private int getChar() throws IOException
    {
        if(this.eof)
        {
            return -1;
        }

        int result = this.in.read();

        if(result == -1)
        {
            this.eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = this.text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            this.eof = false;

            this.in.unread(this.text.charAt(i));
        }
    }

    protected void unread(@SuppressWarnings("hiding") Token token) throws IOException
    {
        @SuppressWarnings("hiding") String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            this.eof = false;

            this.in.unread(text.charAt(i));
        }

        this.pos = token.getPos() - 1;
        this.line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(this.text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {36, 36, 5}, {40, 40, 6}, {41, 41, 7}, {42, 42, 8}, {43, 43, 9}, {44, 44, 10}, {45, 45, 11}, {46, 46, 12}, {47, 47, 13}, {48, 48, 14}, {49, 57, 15}, {58, 58, 16}, {59, 59, 17}, {60, 60, 18}, {61, 61, 19}, {62, 62, 20}, {65, 65, 21}, {66, 66, 22}, {67, 67, 23}, {68, 68, 24}, {69, 69, 25}, {70, 70, 26}, {71, 72, 23}, {73, 73, 27}, {74, 76, 23}, {77, 77, 28}, {78, 78, 29}, {79, 79, 30}, {80, 80, 31}, {81, 83, 23}, {84, 84, 32}, {85, 85, 23}, {86, 86, 33}, {87, 87, 34}, {88, 88, 35}, {89, 90, 23}, {95, 95, 36}, {97, 97, 37}, {98, 98, 38}, {99, 99, 39}, {100, 100, 40}, {101, 101, 41}, {102, 102, 42}, {103, 104, 39}, {105, 105, 43}, {106, 108, 39}, {109, 109, 44}, {110, 110, 45}, {111, 111, 46}, {112, 112, 47}, {113, 115, 39}, {116, 116, 48}, {117, 117, 39}, {118, 118, 49}, {119, 119, 50}, {120, 120, 51}, {121, 122, 39}, {123, 123, 52}, },
            {{9, 32, -2}, {47, 47, 13}, {123, 123, 52}, },
            {{9, 123, -3}, },
            {{9, 123, -3}, },
            {{9, 123, -3}, },
            {{36, 36, 5}, {48, 57, 53}, {65, 90, 23}, {95, 95, 36}, {97, 122, 39}, },
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {{47, 47, 54}, },
            {{48, 57, 53}, {65, 90, 55}, {95, 95, 56}, {97, 122, 57}, },
            {{48, 57, 58}, {65, 122, -16}, },
            {{61, 61, 59}, },
            {},
            {{61, 61, 60}, {62, 62, 61}, },
            {},
            {{61, 61, 62}, },
            {{36, 57, -7}, {65, 77, 23}, {78, 78, 63}, {79, 90, 23}, {95, 95, 36}, {97, 109, 39}, {110, 110, 64}, {111, 122, 39}, },
            {{36, 57, -7}, {65, 68, 23}, {69, 69, 65}, {70, 78, 23}, {79, 79, 66}, {80, 81, 23}, {82, 82, 67}, {83, 90, 23}, {95, 95, 36}, {97, 100, 39}, {101, 101, 68}, {102, 110, 39}, {111, 111, 69}, {112, 113, 39}, {114, 114, 70}, {115, 122, 39}, },
            {{36, 122, -7}, },
            {{36, 57, -7}, {65, 72, 23}, {73, 73, 71}, {74, 78, 23}, {79, 79, 72}, {80, 90, 23}, {95, 95, 36}, {97, 104, 39}, {105, 105, 73}, {106, 110, 39}, {111, 111, 74}, {112, 122, 39}, },
            {{36, 57, -7}, {65, 75, 23}, {76, 76, 75}, {77, 77, 23}, {78, 78, 76}, {79, 95, -23}, {97, 107, 39}, {108, 108, 77}, {109, 109, 39}, {110, 110, 78}, {111, 122, 39}, },
            {{36, 57, -7}, {65, 65, 79}, {66, 90, 23}, {95, 95, 36}, {97, 97, 80}, {98, 122, 39}, },
            {{36, 57, -7}, {65, 69, 23}, {70, 70, 81}, {71, 77, 23}, {78, 78, 82}, {79, 95, -23}, {97, 101, 39}, {102, 102, 83}, {103, 109, 39}, {110, 110, 84}, {111, 122, 39}, },
            {{36, 57, -7}, {65, 78, 23}, {79, 79, 85}, {80, 95, -26}, {97, 110, 39}, {111, 111, 86}, {112, 122, 39}, },
            {{36, 78, -30}, {79, 79, 87}, {80, 110, -30}, {111, 111, 88}, {112, 122, 39}, },
            {{36, 57, -7}, {65, 81, 23}, {82, 82, 89}, {83, 95, -24}, {97, 113, 39}, {114, 114, 90}, {115, 122, 39}, },
            {{36, 81, -32}, {82, 82, 91}, {83, 113, -32}, {114, 114, 92}, {115, 122, 39}, },
            {{36, 57, -7}, {65, 71, 23}, {72, 72, 93}, {73, 81, 23}, {82, 82, 94}, {83, 95, -24}, {97, 103, 39}, {104, 104, 95}, {105, 113, 39}, {114, 114, 96}, {115, 122, 39}, },
            {{36, 57, -7}, {65, 65, 97}, {66, 95, -28}, {97, 97, 98}, {98, 122, 39}, },
            {{36, 71, -34}, {72, 72, 99}, {73, 81, 23}, {82, 82, 100}, {83, 103, -34}, {104, 104, 101}, {105, 113, 39}, {114, 114, 102}, {115, 122, 39}, },
            {{36, 78, -30}, {79, 79, 103}, {80, 110, -30}, {111, 111, 104}, {112, 122, 39}, },
            {{36, 122, -7}, },
            {{36, 122, -23}, },
            {{36, 122, -24}, },
            {{36, 122, -7}, },
            {{36, 122, -26}, },
            {{36, 122, -27}, },
            {{36, 122, -28}, },
            {{36, 122, -29}, },
            {{36, 122, -30}, },
            {{36, 122, -31}, },
            {{36, 122, -32}, },
            {{36, 122, -33}, },
            {{36, 122, -34}, },
            {{36, 122, -35}, },
            {{36, 122, -36}, },
            {{36, 122, -37}, },
            {{0, 8, 105}, {9, 9, 106}, {10, 10, 107}, {11, 12, 105}, {13, 13, 108}, {14, 31, 105}, {32, 32, 109}, {33, 122, 105}, {124, 124, 105}, {125, 125, 110}, {126, 127, 105}, },
            {{48, 122, -16}, },
            {{0, 8, 111}, {9, 9, 112}, {10, 10, 2}, {11, 12, 111}, {13, 13, 3}, {14, 31, 111}, {32, 32, 113}, {33, 46, 111}, {47, 47, 114}, {48, 122, 111}, {123, 123, 115}, {124, 127, 111}, },
            {{48, 122, -16}, },
            {{48, 122, -16}, },
            {{48, 122, -16}, },
            {{48, 122, -17}, },
            {},
            {},
            {},
            {},
            {{36, 57, -7}, {65, 67, 23}, {68, 68, 116}, {69, 90, 23}, {95, 95, 36}, {97, 99, 39}, {100, 100, 117}, {101, 122, 39}, },
            {{36, 122, -65}, },
            {{36, 57, -7}, {65, 70, 23}, {71, 71, 118}, {72, 90, 23}, {95, 95, 36}, {97, 102, 39}, {103, 103, 119}, {104, 122, 39}, },
            {{36, 78, -30}, {79, 79, 120}, {80, 110, -30}, {111, 111, 121}, {112, 122, 39}, },
            {{36, 68, -24}, {69, 69, 122}, {70, 90, 23}, {95, 100, -24}, {101, 101, 123}, {102, 122, 39}, },
            {{36, 122, -67}, },
            {{36, 122, -68}, },
            {{36, 122, -69}, },
            {{36, 57, -7}, {65, 85, 23}, {86, 86, 124}, {87, 90, 23}, {95, 95, 36}, {97, 117, 39}, {118, 118, 125}, {119, 122, 39}, },
            {{36, 122, -7}, },
            {{36, 122, -73}, },
            {{36, 122, -7}, },
            {{36, 57, -7}, {65, 82, 23}, {83, 83, 126}, {84, 90, 23}, {95, 95, 36}, {97, 114, 39}, {115, 115, 127}, {116, 122, 39}, },
            {{36, 67, -65}, {68, 68, 128}, {69, 99, -65}, {100, 100, 129}, {101, 122, 39}, },
            {{36, 122, -77}, },
            {{36, 122, -78}, },
            {{36, 75, -27}, {76, 76, 130}, {77, 90, 23}, {95, 107, -27}, {108, 108, 131}, {109, 122, 39}, },
            {{36, 122, -81}, },
            {{36, 122, -7}, },
            {{36, 57, -7}, {65, 83, 23}, {84, 84, 132}, {85, 90, 23}, {95, 95, 36}, {97, 115, 39}, {116, 116, 133}, {117, 122, 39}, },
            {{36, 122, -7}, },
            {{36, 122, -84}, },
            {{36, 67, -65}, {68, 68, 134}, {69, 99, -65}, {100, 100, 135}, {101, 122, 39}, },
            {{36, 122, -87}, },
            {{36, 83, -84}, {84, 84, 136}, {85, 115, -84}, {116, 116, 137}, {117, 122, 39}, },
            {{36, 122, -89}, },
            {{36, 122, -7}, },
            {{36, 122, -7}, },
            {{36, 78, -30}, {79, 79, 138}, {80, 110, -30}, {111, 111, 139}, {112, 122, 39}, },
            {{36, 122, -93}, },
            {{36, 68, -24}, {69, 69, 140}, {70, 100, -69}, {101, 101, 141}, {102, 122, 39}, },
            {{36, 57, -7}, {65, 84, 23}, {85, 85, 142}, {86, 90, 23}, {95, 95, 36}, {97, 116, 39}, {117, 117, 143}, {118, 122, 39}, },
            {{36, 122, -95}, },
            {{36, 122, -96}, },
            {{36, 81, -32}, {82, 82, 144}, {83, 113, -32}, {114, 114, 145}, {115, 122, 39}, },
            {{36, 122, -99}, },
            {{36, 72, -26}, {73, 73, 146}, {74, 90, 23}, {95, 104, -26}, {105, 105, 147}, {106, 122, 39}, },
            {{36, 72, -26}, {73, 73, 148}, {74, 104, -101}, {105, 105, 149}, {106, 122, 39}, },
            {{36, 122, -101}, },
            {{36, 122, -102}, },
            {{36, 81, -32}, {82, 82, 150}, {83, 113, -32}, {114, 114, 151}, {115, 122, 39}, },
            {{36, 122, -105}, },
            {{0, 127, -54}, },
            {{0, 127, -54}, },
            {{0, 127, -54}, },
            {{0, 127, -54}, },
            {{0, 127, -54}, },
            {{9, 123, -3}, },
            {{0, 127, -56}, },
            {{0, 127, -56}, },
            {{0, 127, -56}, },
            {{0, 46, -56}, {47, 47, 152}, {48, 127, -56}, },
            {{0, 8, 153}, {9, 9, 154}, {10, 10, 155}, {11, 12, 153}, {13, 13, 156}, {14, 31, 153}, {32, 32, 157}, {33, 46, 153}, {47, 47, 158}, {48, 122, 153}, {123, 123, 115}, {124, 124, 153}, {125, 125, 159}, {126, 127, 153}, },
            {{36, 122, -7}, },
            {{36, 122, -7}, },
            {{36, 72, -26}, {73, 73, 160}, {74, 104, -101}, {105, 105, 161}, {106, 122, 39}, },
            {{36, 122, -120}, },
            {{36, 75, -27}, {76, 76, 162}, {77, 107, -81}, {108, 108, 163}, {109, 122, 39}, },
            {{36, 122, -122}, },
            {{36, 57, -7}, {65, 65, 164}, {66, 95, -28}, {97, 97, 165}, {98, 122, 39}, },
            {{36, 122, -124}, },
            {{36, 122, -7}, },
            {{36, 122, -7}, },
            {{36, 68, -24}, {69, 69, 166}, {70, 100, -69}, {101, 101, 167}, {102, 122, 39}, },
            {{36, 122, -128}, },
            {{36, 36, 5}, {46, 46, 168}, {48, 122, -7}, },
            {{36, 122, -130}, },
            {{36, 82, -77}, {83, 83, 169}, {84, 114, -77}, {115, 115, 170}, {116, 122, 39}, },
            {{36, 122, -132}, },
            {{36, 68, -24}, {69, 69, 171}, {70, 100, -69}, {101, 101, 172}, {102, 122, 39}, },
            {{36, 122, -134}, },
            {{36, 122, -7}, },
            {{36, 122, -7}, },
            {{36, 122, -7}, },
            {{36, 122, -7}, },
            {{36, 70, -67}, {71, 71, 173}, {72, 102, -67}, {103, 103, 174}, {104, 122, 39}, },
            {{36, 122, -140}, },
            {{36, 77, -23}, {78, 78, 175}, {79, 109, -23}, {110, 110, 176}, {111, 122, 39}, },
            {{36, 122, -142}, },
            {{36, 68, -24}, {69, 69, 177}, {70, 100, -69}, {101, 101, 178}, {102, 122, 39}, },
            {{36, 122, -144}, },
            {{36, 122, -7}, },
            {{36, 122, -7}, },
            {{36, 75, -27}, {76, 76, 179}, {77, 107, -81}, {108, 108, 180}, {109, 122, 39}, },
            {{36, 122, -148}, },
            {{36, 83, -84}, {84, 84, 181}, {85, 115, -84}, {116, 116, 182}, {117, 122, 39}, },
            {{36, 122, -150}, },
            {{36, 122, -7}, },
            {{36, 122, -7}, },
            {{0, 127, -116}, },
            {{0, 127, -117}, },
            {{0, 127, -117}, },
            {{0, 8, 105}, {9, 9, 183}, {10, 10, 155}, {11, 12, 105}, {13, 13, 156}, {14, 31, 105}, {32, 32, 184}, {33, 46, 105}, {47, 47, 185}, {48, 122, 105}, {123, 123, 52}, {124, 127, -54}, },
            {{0, 127, -157}, },
            {{0, 127, -117}, },
            {{0, 46, -117}, {47, 47, 186}, {48, 127, -117}, },
            {{0, 127, -56}, },
            {{36, 77, -23}, {78, 78, 187}, {79, 109, -23}, {110, 110, 188}, {111, 122, 39}, },
            {{36, 122, -162}, },
            {{36, 68, -24}, {69, 69, 189}, {70, 100, -69}, {101, 101, 190}, {102, 122, 39}, },
            {{36, 122, -164}, },
            {{36, 57, -7}, {65, 74, 23}, {75, 75, 191}, {76, 90, 23}, {95, 95, 36}, {97, 106, 39}, {107, 107, 192}, {108, 122, 39}, },
            {{36, 122, -166}, },
            {{36, 122, -7}, },
            {{36, 122, -7}, },
            {},
            {{36, 68, -24}, {69, 69, 193}, {70, 100, -69}, {101, 101, 194}, {102, 122, 39}, },
            {{36, 122, -171}, },
            {{36, 70, -67}, {71, 71, 195}, {72, 102, -67}, {103, 103, 196}, {104, 122, 39}, },
            {{36, 122, -173}, },
            {{36, 81, -32}, {82, 82, 197}, {83, 113, -32}, {114, 114, 198}, {115, 122, 39}, },
            {{36, 122, -175}, },
            {{36, 122, -7}, },
            {{36, 122, -7}, },
            {{36, 122, -7}, },
            {{36, 122, -7}, },
            {{36, 68, -24}, {69, 69, 199}, {70, 100, -69}, {101, 101, 200}, {102, 122, 39}, },
            {{36, 122, -181}, },
            {{36, 68, -24}, {69, 69, 201}, {70, 100, -69}, {101, 101, 202}, {102, 122, 39}, },
            {{36, 122, -183}, },
            {{0, 127, -157}, },
            {{0, 127, -157}, },
            {{0, 32, -54}, {33, 46, 105}, {47, 47, 203}, {48, 122, 105}, {124, 127, -54}, },
            {{0, 127, -160}, },
            {{36, 122, -7}, },
            {{36, 122, -7}, },
            {{36, 57, -7}, {65, 65, 204}, {66, 95, -28}, {97, 97, 205}, {98, 122, 39}, },
            {{36, 122, -191}, },
            {{36, 122, -7}, },
            {{36, 122, -7}, },
            {{36, 122, -7}, },
            {{36, 122, -7}, },
            {{36, 68, -24}, {69, 69, 206}, {70, 100, -69}, {101, 101, 207}, {102, 122, 39}, },
            {{36, 122, -197}, },
            {{36, 57, -7}, {65, 65, 208}, {66, 95, -28}, {97, 97, 209}, {98, 122, 39}, },
            {{36, 122, -199}, },
            {{36, 122, -7}, },
            {{36, 122, -7}, },
            {{36, 75, -27}, {76, 76, 210}, {77, 107, -81}, {108, 108, 211}, {109, 122, 39}, },
            {{36, 122, -203}, },
            {{0, 127, -117}, },
            {{36, 77, -23}, {78, 78, 212}, {79, 109, -23}, {110, 110, 213}, {111, 122, 39}, },
            {{36, 122, -206}, },
            {{36, 81, -32}, {82, 82, 214}, {83, 113, -32}, {114, 114, 215}, {115, 122, 39}, },
            {{36, 122, -208}, },
            {{36, 57, -7}, {65, 76, 23}, {77, 77, 216}, {78, 90, 23}, {95, 95, 36}, {97, 108, 39}, {109, 109, 217}, {110, 122, 39}, },
            {{36, 122, -210}, },
            {{36, 77, -23}, {78, 78, 218}, {79, 109, -23}, {110, 110, 219}, {111, 122, 39}, },
            {{36, 122, -212}, },
            {{36, 122, -7}, },
            {{36, 122, -7}, },
            {{36, 122, -7}, },
            {{36, 122, -7}, },
            {{36, 122, -7}, },
            {{36, 122, -7}, },
            {{36, 122, -7}, },
            {{36, 122, -7}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {39, 39, 39, 39, 39, 40, 16, 17, 20, 18, 38, 19, 37, -1, 3, 3, 35, 36, 22, 21, 23, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, -1, 40, 39, 40, 40, 40, 3, 4, 24, 26, 25, 40, 40, 40, 40, 40, 40, 40, 40, 40, 13, 40, 13, 40, 40, 40, 40, 40, 40, 9, 40, 9, 40, 40, 40, 40, 40, 31, 31, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, -1, -1, -1, -1, -1, 39, 39, 39, 39, 39, 39, 29, 29, 40, 40, 40, 40, 40, 40, 27, 27, 40, 40, 7, 7, 40, 40, 40, 40, 28, 28, 32, 32, 40, 40, 40, 40, 40, 40, 2, 2, 40, 40, 40, 40, 30, 30, 39, 39, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 40, 11, 11, 6, 40, 40, 40, 40, 40, 40, 10, 10, 33, 33, 40, 40, 40, 40, 39, 39, -1, 39, 5, 5, 40, 40, 15, 15, 34, 34, 40, 40, 40, 40, 12, 12, 40, 40, 39, 40, 40, 40, 40, 40, 40, 40, 40, 1, 1, 0, 0, 8, 8, 14, 14, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(@SuppressWarnings("hiding") int id)
        {
            this.id = id;
        }

        public int id()
        {
            return this.id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
