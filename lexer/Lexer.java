/* This file was generated by SableCC (http://www.sablecc.org/). */

package lexer;

import java.io.*;
import node.*;

@SuppressWarnings("nls")
public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    @SuppressWarnings("unused")
    protected void filter() throws LexerException, IOException
    {
        // Do nothing
    }

    public Lexer(@SuppressWarnings("hiding") PushbackReader in)
    {
        this.in = in;
    }
 
    public Token peek() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        return this.token;
    }

    public Token next() throws LexerException, IOException
    {
        while(this.token == null)
        {
            this.token = getToken();
            filter();
        }

        Token result = this.token;
        this.token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = this.pos;
        int start_line = this.line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        @SuppressWarnings("hiding") int[][][] gotoTable = Lexer.gotoTable[this.state.id()];
        @SuppressWarnings("hiding") int[] accept = Lexer.accept[this.state.id()];
        this.text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(this.cr)
                    {
                        this.cr = false;
                    }
                    else
                    {
                        this.line++;
                        this.pos = 0;
                    }
                    break;
                case 13:
                    this.line++;
                    this.pos = 0;
                    this.cr = true;
                    break;
                default:
                    this.pos++;
                    this.cr = false;
                    break;
                }

                this.text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        // int middle = (low + high) / 2;
                        int middle = (low + high) >>> 1;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = this.text.length();
                    accept_pos = this.pos;
                    accept_line = this.line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            @SuppressWarnings("hiding") Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            @SuppressWarnings("hiding") Token token = new1(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            @SuppressWarnings("hiding") Token token = new2(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            @SuppressWarnings("hiding") Token token = new3(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            @SuppressWarnings("hiding") Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            @SuppressWarnings("hiding") Token token = new5(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            @SuppressWarnings("hiding") Token token = new6(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            @SuppressWarnings("hiding") Token token = new7(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            @SuppressWarnings("hiding") Token token = new8(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            @SuppressWarnings("hiding") Token token = new9(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            @SuppressWarnings("hiding") Token token = new10(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            @SuppressWarnings("hiding") Token token = new11(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            @SuppressWarnings("hiding") Token token = new12(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            @SuppressWarnings("hiding") Token token = new13(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            @SuppressWarnings("hiding") Token token = new14(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            @SuppressWarnings("hiding") Token token = new15(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            @SuppressWarnings("hiding") Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            @SuppressWarnings("hiding") Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            @SuppressWarnings("hiding") Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            @SuppressWarnings("hiding") Token token = new19(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            @SuppressWarnings("hiding") Token token = new20(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            @SuppressWarnings("hiding") Token token = new21(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            @SuppressWarnings("hiding") Token token = new22(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            @SuppressWarnings("hiding") Token token = new23(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            @SuppressWarnings("hiding") Token token = new24(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            @SuppressWarnings("hiding") Token token = new25(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            @SuppressWarnings("hiding") Token token = new26(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            @SuppressWarnings("hiding") Token token = new27(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            @SuppressWarnings("hiding") Token token = new28(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            @SuppressWarnings("hiding") Token token = new29(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            @SuppressWarnings("hiding") Token token = new30(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            @SuppressWarnings("hiding") Token token = new31(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            @SuppressWarnings("hiding") Token token = new32(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            @SuppressWarnings("hiding") Token token = new33(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            @SuppressWarnings("hiding") Token token = new34(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 35:
                        {
                            @SuppressWarnings("hiding") Token token = new35(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 36:
                        {
                            @SuppressWarnings("hiding") Token token = new36(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 37:
                        {
                            @SuppressWarnings("hiding") Token token = new37(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 38:
                        {
                            @SuppressWarnings("hiding") Token token = new38(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    case 39:
                        {
                            @SuppressWarnings("hiding") Token token = new39(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            this.pos = accept_pos;
                            this.line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(this.text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + this.text);
                    }

                    @SuppressWarnings("hiding") EOF token = new EOF(
                        start_line + 1,
                        start_pos + 1);
                    return token;
                }
            }
        }
    }

    Token new0(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TInteger(text, line, pos); }
    Token new1(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBoolean(text, line, pos); }
    Token new2(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TVar(text, line, pos); }
    Token new3(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNumber(text, line, pos); }
    Token new4(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TAssign(line, pos); }
    Token new5(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBegin(text, line, pos); }
    Token new6(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TProgramend(text, line, pos); }
    Token new7(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEnd(text, line, pos); }
    Token new8(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TProgram(text, line, pos); }
    Token new9(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIf(text, line, pos); }
    Token new10(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TThen(text, line, pos); }
    Token new11(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TElse(text, line, pos); }
    Token new12(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TWhile(text, line, pos); }
    Token new13(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDo(text, line, pos); }
    Token new14(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TWriteln(text, line, pos); }
    Token new15(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TBreak(text, line, pos); }
    Token new16(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLPar(line, pos); }
    Token new17(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TRPar(line, pos); }
    Token new18(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TPlus(line, pos); }
    Token new19(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TMinus(line, pos); }
    Token new20(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TMult(line, pos); }
    Token new21(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDiv(text, line, pos); }
    Token new22(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TMod(text, line, pos); }
    Token new23(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TEq(line, pos); }
    Token new24(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLt(line, pos); }
    Token new25(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TGt(line, pos); }
    Token new26(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TLe(line, pos); }
    Token new27(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TGe(line, pos); }
    Token new28(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNe(line, pos); }
    Token new29(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TAnd(text, line, pos); }
    Token new30(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TOr(text, line, pos); }
    Token new31(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TXor(text, line, pos); }
    Token new32(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TNot(text, line, pos); }
    Token new33(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TTrue(text, line, pos); }
    Token new34(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TFalse(text, line, pos); }
    Token new35(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TColon(line, pos); }
    Token new36(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TSemicolon(line, pos); }
    Token new37(@SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TDot(line, pos); }
    Token new38(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TWhitespace(text, line, pos); }
    Token new39(@SuppressWarnings("hiding") String text, @SuppressWarnings("hiding") int line, @SuppressWarnings("hiding") int pos) { return new TIdentifier(text, line, pos); }

    private int getChar() throws IOException
    {
        if(this.eof)
        {
            return -1;
        }

        int result = this.in.read();

        if(result == -1)
        {
            this.eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = this.text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            this.eof = false;

            this.in.unread(this.text.charAt(i));
        }
    }

    protected void unread(@SuppressWarnings("hiding") Token token) throws IOException
    {
        @SuppressWarnings("hiding") String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            this.eof = false;

            this.in.unread(text.charAt(i));
        }

        this.pos = token.getPos() - 1;
        this.line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(this.text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {40, 40, 5}, {41, 41, 6}, {42, 42, 7}, {43, 43, 8}, {45, 45, 9}, {46, 46, 10}, {48, 48, 11}, {49, 57, 12}, {58, 58, 13}, {59, 59, 14}, {60, 60, 15}, {61, 61, 16}, {62, 62, 17}, {65, 65, 18}, {66, 66, 19}, {67, 67, 20}, {68, 68, 21}, {69, 69, 22}, {70, 70, 23}, {71, 72, 20}, {73, 73, 24}, {74, 76, 20}, {77, 77, 25}, {78, 78, 26}, {79, 79, 27}, {80, 80, 28}, {81, 83, 20}, {84, 84, 29}, {85, 85, 20}, {86, 86, 30}, {87, 87, 31}, {88, 88, 32}, {89, 90, 20}, {97, 97, 33}, {98, 98, 34}, {99, 99, 35}, {100, 100, 36}, {101, 101, 37}, {102, 102, 38}, {103, 104, 35}, {105, 105, 39}, {106, 108, 35}, {109, 109, 40}, {110, 110, 41}, {111, 111, 42}, {112, 112, 43}, {113, 115, 35}, {116, 116, 44}, {117, 117, 35}, {118, 118, 45}, {119, 119, 46}, {120, 120, 47}, {121, 122, 35}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {{48, 57, 48}, },
            {{61, 61, 49}, },
            {},
            {{61, 61, 50}, {62, 62, 51}, },
            {},
            {{61, 61, 52}, },
            {{48, 57, 53}, {65, 77, 54}, {78, 78, 55}, {79, 90, 54}, {97, 109, 56}, {110, 110, 57}, {111, 122, 56}, },
            {{48, 57, 53}, {65, 68, 54}, {69, 69, 58}, {70, 78, 54}, {79, 79, 59}, {80, 81, 54}, {82, 82, 60}, {83, 90, 54}, {97, 100, 56}, {101, 101, 61}, {102, 110, 56}, {111, 111, 62}, {112, 113, 56}, {114, 114, 63}, {115, 122, 56}, },
            {{48, 57, 53}, {65, 90, 54}, {97, 122, 56}, },
            {{48, 57, 53}, {65, 72, 54}, {73, 73, 64}, {74, 78, 54}, {79, 79, 65}, {80, 90, 54}, {97, 104, 56}, {105, 105, 66}, {106, 110, 56}, {111, 111, 67}, {112, 122, 56}, },
            {{48, 57, 53}, {65, 75, 54}, {76, 76, 68}, {77, 77, 54}, {78, 78, 69}, {79, 90, 54}, {97, 107, 56}, {108, 108, 70}, {109, 109, 56}, {110, 110, 71}, {111, 122, 56}, },
            {{48, 57, 53}, {65, 65, 72}, {66, 90, 54}, {97, 97, 73}, {98, 122, 56}, },
            {{48, 57, 53}, {65, 69, 54}, {70, 70, 74}, {71, 77, 54}, {78, 78, 75}, {79, 90, 54}, {97, 101, 56}, {102, 102, 76}, {103, 109, 56}, {110, 110, 77}, {111, 122, 56}, },
            {{48, 57, 53}, {65, 78, 54}, {79, 79, 78}, {80, 90, 54}, {97, 110, 56}, {111, 111, 79}, {112, 122, 56}, },
            {{48, 78, -27}, {79, 79, 80}, {80, 110, -27}, {111, 111, 81}, {112, 122, 56}, },
            {{48, 57, 53}, {65, 81, 54}, {82, 82, 82}, {83, 90, 54}, {97, 113, 56}, {114, 114, 83}, {115, 122, 56}, },
            {{48, 81, -29}, {82, 82, 84}, {83, 113, -29}, {114, 114, 85}, {115, 122, 56}, },
            {{48, 57, 53}, {65, 71, 54}, {72, 72, 86}, {73, 81, 54}, {82, 82, 87}, {83, 90, 54}, {97, 103, 56}, {104, 104, 88}, {105, 113, 56}, {114, 114, 89}, {115, 122, 56}, },
            {{48, 57, 53}, {65, 65, 90}, {66, 90, 54}, {97, 97, 91}, {98, 122, 56}, },
            {{48, 71, -31}, {72, 72, 92}, {73, 81, 54}, {82, 82, 93}, {83, 103, -31}, {104, 104, 94}, {105, 113, 56}, {114, 114, 95}, {115, 122, 56}, },
            {{48, 78, -27}, {79, 79, 96}, {80, 110, -27}, {111, 111, 97}, {112, 122, 56}, },
            {{48, 122, -20}, },
            {{48, 122, -21}, },
            {{48, 122, -22}, },
            {{48, 122, -23}, },
            {{48, 122, -24}, },
            {{48, 122, -25}, },
            {{48, 122, -26}, },
            {{48, 122, -27}, },
            {{48, 122, -28}, },
            {{48, 122, -29}, },
            {{48, 122, -30}, },
            {{48, 122, -31}, },
            {{48, 122, -32}, },
            {{48, 122, -33}, },
            {{48, 122, -34}, },
            {{48, 57, 48}, },
            {},
            {},
            {},
            {},
            {{48, 57, 53}, {65, 90, 98}, {97, 122, 99}, },
            {{48, 122, -22}, },
            {{48, 57, 53}, {65, 67, 54}, {68, 68, 100}, {69, 90, 54}, {97, 99, 56}, {100, 100, 101}, {101, 122, 56}, },
            {{48, 122, -22}, },
            {{48, 122, -57}, },
            {{48, 57, 53}, {65, 70, 54}, {71, 71, 102}, {72, 90, 54}, {97, 102, 56}, {103, 103, 103}, {104, 122, 56}, },
            {{48, 78, -27}, {79, 79, 104}, {80, 110, -27}, {111, 111, 105}, {112, 122, 56}, },
            {{48, 68, -21}, {69, 69, 106}, {70, 90, 54}, {97, 100, 56}, {101, 101, 107}, {102, 122, 56}, },
            {{48, 122, -60}, },
            {{48, 122, -61}, },
            {{48, 122, -62}, },
            {{48, 57, 53}, {65, 85, 54}, {86, 86, 108}, {87, 90, 54}, {97, 117, 56}, {118, 118, 109}, {119, 122, 56}, },
            {{48, 122, -22}, },
            {{48, 122, -66}, },
            {{48, 122, -22}, },
            {{48, 57, 53}, {65, 82, 54}, {83, 83, 110}, {84, 90, 54}, {97, 114, 56}, {115, 115, 111}, {116, 122, 56}, },
            {{48, 67, -57}, {68, 68, 112}, {69, 99, -57}, {100, 100, 113}, {101, 122, 56}, },
            {{48, 122, -70}, },
            {{48, 122, -71}, },
            {{48, 75, -24}, {76, 76, 114}, {77, 90, 54}, {97, 107, 56}, {108, 108, 115}, {109, 122, 56}, },
            {{48, 122, -74}, },
            {{48, 122, -22}, },
            {{48, 57, 53}, {65, 83, 54}, {84, 84, 116}, {85, 90, 54}, {97, 115, 56}, {116, 116, 117}, {117, 122, 56}, },
            {{48, 122, -22}, },
            {{48, 122, -77}, },
            {{48, 67, -57}, {68, 68, 118}, {69, 99, -57}, {100, 100, 119}, {101, 122, 56}, },
            {{48, 122, -80}, },
            {{48, 83, -77}, {84, 84, 120}, {85, 115, -77}, {116, 116, 121}, {117, 122, 56}, },
            {{48, 122, -82}, },
            {{48, 122, -22}, },
            {{48, 122, -22}, },
            {{48, 78, -27}, {79, 79, 122}, {80, 110, -27}, {111, 111, 123}, {112, 122, 56}, },
            {{48, 122, -86}, },
            {{48, 68, -21}, {69, 69, 124}, {70, 100, -62}, {101, 101, 125}, {102, 122, 56}, },
            {{48, 57, 53}, {65, 84, 54}, {85, 85, 126}, {86, 90, 54}, {97, 116, 56}, {117, 117, 127}, {118, 122, 56}, },
            {{48, 122, -88}, },
            {{48, 122, -89}, },
            {{48, 81, -29}, {82, 82, 128}, {83, 113, -29}, {114, 114, 129}, {115, 122, 56}, },
            {{48, 122, -92}, },
            {{48, 72, -23}, {73, 73, 130}, {74, 90, 54}, {97, 104, 56}, {105, 105, 131}, {106, 122, 56}, },
            {{48, 72, -23}, {73, 73, 132}, {74, 104, -94}, {105, 105, 133}, {106, 122, 56}, },
            {{48, 122, -94}, },
            {{48, 122, -95}, },
            {{48, 81, -29}, {82, 82, 134}, {83, 113, -29}, {114, 114, 135}, {115, 122, 56}, },
            {{48, 122, -98}, },
            {{48, 122, -55}, },
            {{48, 122, -55}, },
            {{48, 122, -22}, },
            {{48, 122, -22}, },
            {{48, 72, -23}, {73, 73, 136}, {74, 104, -94}, {105, 105, 137}, {106, 122, 56}, },
            {{48, 122, -104}, },
            {{48, 75, -24}, {76, 76, 138}, {77, 107, -74}, {108, 108, 139}, {109, 122, 56}, },
            {{48, 122, -106}, },
            {{48, 57, 53}, {65, 65, 140}, {66, 90, 54}, {97, 97, 141}, {98, 122, 56}, },
            {{48, 122, -108}, },
            {{48, 122, -22}, },
            {{48, 122, -22}, },
            {{48, 68, -21}, {69, 69, 142}, {70, 100, -62}, {101, 101, 143}, {102, 122, 56}, },
            {{48, 122, -112}, },
            {{46, 46, 144}, {48, 122, -22}, },
            {{46, 122, -114}, },
            {{48, 82, -70}, {83, 83, 145}, {84, 114, -70}, {115, 115, 146}, {116, 122, 56}, },
            {{48, 122, -116}, },
            {{48, 68, -21}, {69, 69, 147}, {70, 100, -62}, {101, 101, 148}, {102, 122, 56}, },
            {{48, 122, -118}, },
            {{48, 122, -22}, },
            {{48, 122, -22}, },
            {{48, 122, -22}, },
            {{48, 122, -22}, },
            {{48, 70, -60}, {71, 71, 149}, {72, 102, -60}, {103, 103, 150}, {104, 122, 56}, },
            {{48, 122, -124}, },
            {{48, 77, -20}, {78, 78, 151}, {79, 109, -20}, {110, 110, 152}, {111, 122, 56}, },
            {{48, 122, -126}, },
            {{48, 68, -21}, {69, 69, 153}, {70, 100, -62}, {101, 101, 154}, {102, 122, 56}, },
            {{48, 122, -128}, },
            {{48, 122, -22}, },
            {{48, 122, -22}, },
            {{48, 75, -24}, {76, 76, 155}, {77, 107, -74}, {108, 108, 156}, {109, 122, 56}, },
            {{48, 122, -132}, },
            {{48, 83, -77}, {84, 84, 157}, {85, 115, -77}, {116, 116, 158}, {117, 122, 56}, },
            {{48, 122, -134}, },
            {{48, 122, -22}, },
            {{48, 122, -22}, },
            {{48, 77, -20}, {78, 78, 159}, {79, 109, -20}, {110, 110, 160}, {111, 122, 56}, },
            {{48, 122, -138}, },
            {{48, 68, -21}, {69, 69, 161}, {70, 100, -62}, {101, 101, 162}, {102, 122, 56}, },
            {{48, 122, -140}, },
            {{48, 57, 53}, {65, 74, 54}, {75, 75, 163}, {76, 90, 54}, {97, 106, 56}, {107, 107, 164}, {108, 122, 56}, },
            {{48, 122, -142}, },
            {{48, 122, -22}, },
            {{48, 122, -22}, },
            {},
            {{48, 68, -21}, {69, 69, 165}, {70, 100, -62}, {101, 101, 166}, {102, 122, 56}, },
            {{48, 122, -147}, },
            {{48, 70, -60}, {71, 71, 167}, {72, 102, -60}, {103, 103, 168}, {104, 122, 56}, },
            {{48, 122, -149}, },
            {{48, 81, -29}, {82, 82, 169}, {83, 113, -29}, {114, 114, 170}, {115, 122, 56}, },
            {{48, 122, -151}, },
            {{48, 122, -22}, },
            {{48, 122, -22}, },
            {{48, 122, -22}, },
            {{48, 122, -22}, },
            {{48, 68, -21}, {69, 69, 171}, {70, 100, -62}, {101, 101, 172}, {102, 122, 56}, },
            {{48, 122, -157}, },
            {{48, 68, -21}, {69, 69, 173}, {70, 100, -62}, {101, 101, 174}, {102, 122, 56}, },
            {{48, 122, -159}, },
            {{48, 122, -22}, },
            {{48, 122, -22}, },
            {{48, 57, 53}, {65, 65, 175}, {66, 90, 54}, {97, 97, 176}, {98, 122, 56}, },
            {{48, 122, -163}, },
            {{48, 122, -22}, },
            {{48, 122, -22}, },
            {{48, 122, -22}, },
            {{48, 122, -22}, },
            {{48, 68, -21}, {69, 69, 177}, {70, 100, -62}, {101, 101, 178}, {102, 122, 56}, },
            {{48, 122, -169}, },
            {{48, 57, 53}, {65, 65, 179}, {66, 90, 54}, {97, 97, 180}, {98, 122, 56}, },
            {{48, 122, -171}, },
            {{48, 122, -22}, },
            {{48, 122, -22}, },
            {{48, 75, -24}, {76, 76, 181}, {77, 107, -74}, {108, 108, 182}, {109, 122, 56}, },
            {{48, 122, -175}, },
            {{48, 77, -20}, {78, 78, 183}, {79, 109, -20}, {110, 110, 184}, {111, 122, 56}, },
            {{48, 122, -177}, },
            {{48, 81, -29}, {82, 82, 185}, {83, 113, -29}, {114, 114, 186}, {115, 122, 56}, },
            {{48, 122, -179}, },
            {{48, 57, 53}, {65, 76, 54}, {77, 77, 187}, {78, 90, 54}, {97, 108, 56}, {109, 109, 188}, {110, 122, 56}, },
            {{48, 122, -181}, },
            {{48, 77, -20}, {78, 78, 189}, {79, 109, -20}, {110, 110, 190}, {111, 122, 56}, },
            {{48, 122, -183}, },
            {{48, 122, -22}, },
            {{48, 122, -22}, },
            {{48, 122, -22}, },
            {{48, 122, -22}, },
            {{48, 122, -22}, },
            {{48, 122, -22}, },
            {{48, 122, -22}, },
            {{48, 122, -22}, },
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {-1, 38, 38, 38, 38, 16, 17, 20, 18, 19, 37, 3, 3, 35, 36, 24, 23, 25, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 3, 4, 26, 28, 27, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 13, 39, 13, 39, 39, 39, 39, 39, 39, 9, 39, 9, 39, 39, 39, 39, 39, 30, 30, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 29, 29, 39, 39, 39, 39, 39, 39, 21, 21, 39, 39, 7, 7, 39, 39, 39, 39, 22, 22, 32, 32, 39, 39, 39, 39, 39, 39, 2, 2, 39, 39, 39, 39, 31, 31, 39, 39, 39, 39, 39, 39, 11, 11, 6, 39, 39, 39, 39, 39, 39, 10, 10, 33, 33, 39, 39, 39, 39, 5, 5, 39, 39, 15, 15, 34, 34, 39, 39, 39, 39, 12, 12, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 1, 1, 0, 0, 8, 8, 14, 14, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(@SuppressWarnings("hiding") int id)
        {
            this.id = id;
        }

        public int id()
        {
            return this.id;
        }
    }

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = s.readInt();
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = s.readInt();
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = s.readInt();
                        }
                    }
                }
            }

            // read accept
            length = s.readInt();
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = s.readInt();
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = s.readInt();
                }
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }
}
