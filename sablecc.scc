Helpers
	firstnum = ['1'..'9'];
	number 	 = ['0'..'9'];
	letter   = (['a'..'z']|['A'..'Z']);

Tokens
	// Datatypes
	integer		= 'integer';
	boolean		= 'boolean';
	var			= 'var';
	number 		= (firstnum number*)|'0';

	// Commands
	assign	= ':=';
	begin 	= 'begin';
	programend 	= 'end.';
	end 	= 'end';
	program	= 'program';
	if		= 'if';
	then	= 'then';
	else	= 'else';
	while	= 'while';
	do		= 'do';
	writeln	= 'writeln';
	break 	= 'break';

	// Operator
	l_par	= '(';
	r_par	= ')';
	plus 	= '+';
	minus 	= '-';
	mult	= '*';
	div 	= 'div';
	mod 	= 'mod';
	eq		= '=';
	lt		= '<';
	gt 		= '>';
	le		= '<=';
	ge		= '>=';
	ne		= '<>';
	and		= 'and';
	or		= 'or';
	xor 	= 'xor';
	not 	= 'not';
	true	= 'true';
	false	= 'false';

	// Other
	colon 		= ':';
	semikolon	= ';';
	dot 		= '.';
	whitespace	= (' '| 10 | 13)+;
	identifier	= letter+number*letter*;

Ignored Tokens
	whitespace;

Productions
	start = 
		   program identifier semikolon body programend;
	body = 
		   {with_dec} declarations begin instructions 
		 | {without_dec} begin instructions
		 | {without_instructions} declarations begin;

	instructions = 
		   {ops} operation
		 | {mult_instructions} instructions semikolon operation
		 | {nested} begin instructions end
		 | [left]:instructions semikolon [right]:instructions;

	operation = 
		   {if} ifexpr
		 | {while} while expr do instructions
		 | {assign} assignment
		 | {print} print
		 | break;

	print =
		   writeln l_par expr r_par;

	assignment = 
		   identifier assign expr;

	declarations =
		   {single} var identifier colon type semikolon
		 | {multi} declarations var identifier colon type semikolon;

	type = 
		   {boolean} boolean
		 | {integer} integer;
	
	expr = 
		  {comparision} [left]:expr comparision [right]:expr
		 | foo;

	foo =
		   {plus} foo plus wtf 
		 | {minus} foo minus wtf
		 | {or} foo or wtf
		 | {xor} foo xor wtf
		 | wtf;

	wtf =
		   {mod} wtf mod bombe
		 | {mult} wtf mult bombe
		 | {div} wtf div bombe
		 | {and} wtf and bombe
		 | bombe;

	bombe = 
		   {not} not bombe
		 | {number} number
		 | {identifier} identifier
		 | {true} true
		 | {false} false;

	comparision = 
		   {gt} gt
		 | {ge} ge
		 | {lt} lt
		 | {le} le
		 | {ne} ne
		 | {eq} eq;

	/**
	 * If Expressions
	 */
	ifexpr = 
		   {matched} matchedstmt
		 | {openstmt} openstmt;

	matchedstmt = 
		   {matched} if expr then [left]:matchedstmt else [right]:matchedstmt
		 | other_instructions;

	openstmt =
		   if expr then ifexpr
		 | {else} if expr then matchedstmt else openstmt;

	other_instructions = 
		   {ops} other_operation
		 | {mult_instructions} other_instructions semikolon other_operation
		 | {nested} begin other_instructions end
		 | [left]:other_instructions semikolon [right]:other_instructions;

 	other_operation = 
		   {while} while expr do other_instructions
		 | {assign} assignment
		 | {print} print
		 | break;





