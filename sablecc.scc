Helpers
	firstnum = ['1'..'9'];
	number 	 = ['0'..'9'];
	letter   = (['a'..'z']|['A'..'Z']);

Tokens
	// Datatypes
	integer		= 'integer';
	boolean		= 'boolean';
	var			= 'var';
	number 		= (firstnum number*)|'0';

	// Commands
	assign	= ':=';
	begin 	= 'begin';
	programend 	= 'end.';
	end 	= 'end';
	program	= 'program';
	if		= 'if';
	then	= 'then';
	else	= 'else';
	while	= 'while';
	do		= 'do';
	writeln	= 'writeln';
	break 	= 'break';

	// Operator
	l_par	= '(';
	r_par	= ')';
	plus 	= '+';
	minus 	= '-';
	mult	= '*';
	div 	= 'div';
	mod 	= 'mod';
	eq		= '=';
	lt		= '<';
	gt 		= '>';
	le		= '<=';
	ge		= '>=';
	ne		= '<>';
	and		= 'and';
	or		= 'or';
	xor 	= 'xor';
	not 	= 'not';
	true	= 'true';
	false	= 'false';

	// Other
	colon 		= ':';
	semicolon	= ';';
	dot 		= '.';
	tick 		= '\'';
	whitespace	= (' '| 10 | 13)+;
	identifier	= letter+number*letter*;

Ignored Tokens
	whitespace;

// Pruefe noch auf leeres Programm
Productions
	start = 
		   program identifier semicolon declarations* statement* programend;
	
	declarations =
		   {single} var identifier colon type semicolon;

	statement = 
		   {if_then_statement} if_then_statement
		 | {if_then_else_statement} if_then_else_statement  
		 | {while} while_statement
		 | {assign} assignment
		 | {print} print
		 | {nested} begin statement end
		 | {break} break
		 | semicolon;

	print =
		   writeln l_par tick expr tick r_par;

	assignment = 
		   identifier assign expr;

	type = 
		   {boolean} boolean
		 | {integer} integer;
	
	expr = 
		  {comparision} [left]:expr comparision [right]:expr2
		 | expr2;

	expr2 =
		   {plus} expr2 plus expr3 
		 | {minus} expr2 minus expr3
		 | {or} expr2 or expr3
		 | {xor} expr2 xor expr3
		 | expr3;

	expr3 =
		   {mod} expr3 mod expr4
		 | {mult} expr3 mult expr4
		 | {div} expr3 div expr4
		 | {and} expr3 and expr4
		 | expr4;

	expr4 = 
		   {not} not expr4
		 | {number} number
		 | {identifier} identifier
		 | {true} true
		 | {false} false;

	comparision = 
		   {gt} gt
		 | {ge} ge
		 | {lt} lt
		 | {le} le
		 | {ne} ne
		 | {eq} eq;

	/**
	 * If Expressions
	 */
	if_then_statement =
		   if expr then statement;

	if_then_else_statement =
		   if expr then statement_no_short_if else statement;

	if_then_else_statement_no_short_if =
		   if expr then [left]:statement_no_short_if else [right]:statement_no_short_if;

	statement_no_short_if =
		   {if} if_then_else_statement_no_short_if
		 | {while} while_statement_no_short_if;

	while_statement_no_short_if =
		   {while} while expr do statement_no_short_if;

	while_statement =
		   {while} while expr do statement;








