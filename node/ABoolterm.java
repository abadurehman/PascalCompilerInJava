/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class ABoolterm extends PBoolterm
{
    private PBoolfactor _boolfactor_;

    public ABoolterm()
    {
        // Constructor
    }

    public ABoolterm(
        @SuppressWarnings("hiding") PBoolfactor _boolfactor_)
    {
        // Constructor
        setBoolfactor(_boolfactor_);

    }

    @Override
    public Object clone()
    {
        return new ABoolterm(
            cloneNode(this._boolfactor_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABoolterm(this);
    }

    public PBoolfactor getBoolfactor()
    {
        return this._boolfactor_;
    }

    public void setBoolfactor(PBoolfactor node)
    {
        if(this._boolfactor_ != null)
        {
            this._boolfactor_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._boolfactor_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._boolfactor_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._boolfactor_ == child)
        {
            this._boolfactor_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._boolfactor_ == oldChild)
        {
            setBoolfactor((PBoolfactor) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
