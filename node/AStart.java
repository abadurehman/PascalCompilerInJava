/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import java.util.*;
import analysis.*;

@SuppressWarnings("nls")
public final class AStart extends PStart
{
    private TProgram _program_;
    private TIdentifier _identifier_;
    private TSemikolon _semikolon_;
    private final LinkedList<PDeclarations> _declarations_ = new LinkedList<PDeclarations>();
    private final LinkedList<PStatement> _statement_ = new LinkedList<PStatement>();
    private TDot _dot_;

    public AStart()
    {
        // Constructor
    }

    public AStart(
        @SuppressWarnings("hiding") TProgram _program_,
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") TSemikolon _semikolon_,
        @SuppressWarnings("hiding") List<?> _declarations_,
        @SuppressWarnings("hiding") List<?> _statement_,
        @SuppressWarnings("hiding") TDot _dot_)
    {
        // Constructor
        setProgram(_program_);

        setIdentifier(_identifier_);

        setSemikolon(_semikolon_);

        setDeclarations(_declarations_);

        setStatement(_statement_);

        setDot(_dot_);

    }

    @Override
    public Object clone()
    {
        return new AStart(
            cloneNode(this._program_),
            cloneNode(this._identifier_),
            cloneNode(this._semikolon_),
            cloneList(this._declarations_),
            cloneList(this._statement_),
            cloneNode(this._dot_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAStart(this);
    }

    public TProgram getProgram()
    {
        return this._program_;
    }

    public void setProgram(TProgram node)
    {
        if(this._program_ != null)
        {
            this._program_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._program_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public TSemikolon getSemikolon()
    {
        return this._semikolon_;
    }

    public void setSemikolon(TSemikolon node)
    {
        if(this._semikolon_ != null)
        {
            this._semikolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semikolon_ = node;
    }

    public LinkedList<PDeclarations> getDeclarations()
    {
        return this._declarations_;
    }

    public void setDeclarations(List<?> list)
    {
        for(PDeclarations e : this._declarations_)
        {
            e.parent(null);
        }
        this._declarations_.clear();

        for(Object obj_e : list)
        {
            PDeclarations e = (PDeclarations) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._declarations_.add(e);
        }
    }

    public LinkedList<PStatement> getStatement()
    {
        return this._statement_;
    }

    public void setStatement(List<?> list)
    {
        for(PStatement e : this._statement_)
        {
            e.parent(null);
        }
        this._statement_.clear();

        for(Object obj_e : list)
        {
            PStatement e = (PStatement) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._statement_.add(e);
        }
    }

    public TDot getDot()
    {
        return this._dot_;
    }

    public void setDot(TDot node)
    {
        if(this._dot_ != null)
        {
            this._dot_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dot_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._program_)
            + toString(this._identifier_)
            + toString(this._semikolon_)
            + toString(this._declarations_)
            + toString(this._statement_)
            + toString(this._dot_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._program_ == child)
        {
            this._program_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._semikolon_ == child)
        {
            this._semikolon_ = null;
            return;
        }

        if(this._declarations_.remove(child))
        {
            return;
        }

        if(this._statement_.remove(child))
        {
            return;
        }

        if(this._dot_ == child)
        {
            this._dot_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._program_ == oldChild)
        {
            setProgram((TProgram) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._semikolon_ == oldChild)
        {
            setSemikolon((TSemikolon) newChild);
            return;
        }

        for(ListIterator<PDeclarations> i = this._declarations_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PDeclarations) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PStatement> i = this._statement_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PStatement) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._dot_ == oldChild)
        {
            setDot((TDot) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
