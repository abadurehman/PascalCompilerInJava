/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AWhileWhileStatementNoShortIf extends PWhileStatementNoShortIf
{
    private TWhile _while_;
    private PExpr _expr_;
    private TDo _do_;
    private PStatementNoShortIf _statementNoShortIf_;

    public AWhileWhileStatementNoShortIf()
    {
        // Constructor
    }

    public AWhileWhileStatementNoShortIf(
        @SuppressWarnings("hiding") TWhile _while_,
        @SuppressWarnings("hiding") PExpr _expr_,
        @SuppressWarnings("hiding") TDo _do_,
        @SuppressWarnings("hiding") PStatementNoShortIf _statementNoShortIf_)
    {
        // Constructor
        setWhile(_while_);

        setExpr(_expr_);

        setDo(_do_);

        setStatementNoShortIf(_statementNoShortIf_);

    }

    @Override
    public Object clone()
    {
        return new AWhileWhileStatementNoShortIf(
            cloneNode(this._while_),
            cloneNode(this._expr_),
            cloneNode(this._do_),
            cloneNode(this._statementNoShortIf_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAWhileWhileStatementNoShortIf(this);
    }

    public TWhile getWhile()
    {
        return this._while_;
    }

    public void setWhile(TWhile node)
    {
        if(this._while_ != null)
        {
            this._while_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._while_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    public TDo getDo()
    {
        return this._do_;
    }

    public void setDo(TDo node)
    {
        if(this._do_ != null)
        {
            this._do_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._do_ = node;
    }

    public PStatementNoShortIf getStatementNoShortIf()
    {
        return this._statementNoShortIf_;
    }

    public void setStatementNoShortIf(PStatementNoShortIf node)
    {
        if(this._statementNoShortIf_ != null)
        {
            this._statementNoShortIf_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statementNoShortIf_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._while_)
            + toString(this._expr_)
            + toString(this._do_)
            + toString(this._statementNoShortIf_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._while_ == child)
        {
            this._while_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        if(this._do_ == child)
        {
            this._do_ = null;
            return;
        }

        if(this._statementNoShortIf_ == child)
        {
            this._statementNoShortIf_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._while_ == oldChild)
        {
            setWhile((TWhile) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(this._do_ == oldChild)
        {
            setDo((TDo) newChild);
            return;
        }

        if(this._statementNoShortIf_ == oldChild)
        {
            setStatementNoShortIf((PStatementNoShortIf) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
