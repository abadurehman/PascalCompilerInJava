/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AOrBoolexpr extends PBoolexpr
{
    private PBoolexpr _boolexpr_;
    private TOr _or_;
    private PBoolterm _boolterm_;

    public AOrBoolexpr()
    {
        // Constructor
    }

    public AOrBoolexpr(
        @SuppressWarnings("hiding") PBoolexpr _boolexpr_,
        @SuppressWarnings("hiding") TOr _or_,
        @SuppressWarnings("hiding") PBoolterm _boolterm_)
    {
        // Constructor
        setBoolexpr(_boolexpr_);

        setOr(_or_);

        setBoolterm(_boolterm_);

    }

    @Override
    public Object clone()
    {
        return new AOrBoolexpr(
            cloneNode(this._boolexpr_),
            cloneNode(this._or_),
            cloneNode(this._boolterm_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOrBoolexpr(this);
    }

    public PBoolexpr getBoolexpr()
    {
        return this._boolexpr_;
    }

    public void setBoolexpr(PBoolexpr node)
    {
        if(this._boolexpr_ != null)
        {
            this._boolexpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._boolexpr_ = node;
    }

    public TOr getOr()
    {
        return this._or_;
    }

    public void setOr(TOr node)
    {
        if(this._or_ != null)
        {
            this._or_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._or_ = node;
    }

    public PBoolterm getBoolterm()
    {
        return this._boolterm_;
    }

    public void setBoolterm(PBoolterm node)
    {
        if(this._boolterm_ != null)
        {
            this._boolterm_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._boolterm_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._boolexpr_)
            + toString(this._or_)
            + toString(this._boolterm_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._boolexpr_ == child)
        {
            this._boolexpr_ = null;
            return;
        }

        if(this._or_ == child)
        {
            this._or_ = null;
            return;
        }

        if(this._boolterm_ == child)
        {
            this._boolterm_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._boolexpr_ == oldChild)
        {
            setBoolexpr((PBoolexpr) newChild);
            return;
        }

        if(this._or_ == oldChild)
        {
            setOr((TOr) newChild);
            return;
        }

        if(this._boolterm_ == oldChild)
        {
            setBoolterm((PBoolterm) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
