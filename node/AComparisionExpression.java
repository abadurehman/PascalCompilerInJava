/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AComparisionExpression extends PExpression
{
    private PExpression _expression_;
    private PComparision _comparision_;
    private PExpression2 _expression2_;

    public AComparisionExpression()
    {
        // Constructor
    }

    public AComparisionExpression(
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") PComparision _comparision_,
        @SuppressWarnings("hiding") PExpression2 _expression2_)
    {
        // Constructor
        setExpression(_expression_);

        setComparision(_comparision_);

        setExpression2(_expression2_);

    }

    @Override
    public Object clone()
    {
        return new AComparisionExpression(
            cloneNode(this._expression_),
            cloneNode(this._comparision_),
            cloneNode(this._expression2_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAComparisionExpression(this);
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public PComparision getComparision()
    {
        return this._comparision_;
    }

    public void setComparision(PComparision node)
    {
        if(this._comparision_ != null)
        {
            this._comparision_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comparision_ = node;
    }

    public PExpression2 getExpression2()
    {
        return this._expression2_;
    }

    public void setExpression2(PExpression2 node)
    {
        if(this._expression2_ != null)
        {
            this._expression2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression2_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._expression_)
            + toString(this._comparision_)
            + toString(this._expression2_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._comparision_ == child)
        {
            this._comparision_ = null;
            return;
        }

        if(this._expression2_ == child)
        {
            this._expression2_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(this._comparision_ == oldChild)
        {
            setComparision((PComparision) newChild);
            return;
        }

        if(this._expression2_ == oldChild)
        {
            setExpression2((PExpression2) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
