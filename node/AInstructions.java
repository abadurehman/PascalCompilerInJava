/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AInstructions extends PInstructions
{
    private PInstructions _left_;
    private TSemikolon _semikolon_;
    private TBegin _begin_;
    private PInstructions _right_;
    private TEnd _end_;

    public AInstructions()
    {
        // Constructor
    }

    public AInstructions(
        @SuppressWarnings("hiding") PInstructions _left_,
        @SuppressWarnings("hiding") TSemikolon _semikolon_,
        @SuppressWarnings("hiding") TBegin _begin_,
        @SuppressWarnings("hiding") PInstructions _right_,
        @SuppressWarnings("hiding") TEnd _end_)
    {
        // Constructor
        setLeft(_left_);

        setSemikolon(_semikolon_);

        setBegin(_begin_);

        setRight(_right_);

        setEnd(_end_);

    }

    @Override
    public Object clone()
    {
        return new AInstructions(
            cloneNode(this._left_),
            cloneNode(this._semikolon_),
            cloneNode(this._begin_),
            cloneNode(this._right_),
            cloneNode(this._end_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAInstructions(this);
    }

    public PInstructions getLeft()
    {
        return this._left_;
    }

    public void setLeft(PInstructions node)
    {
        if(this._left_ != null)
        {
            this._left_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._left_ = node;
    }

    public TSemikolon getSemikolon()
    {
        return this._semikolon_;
    }

    public void setSemikolon(TSemikolon node)
    {
        if(this._semikolon_ != null)
        {
            this._semikolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semikolon_ = node;
    }

    public TBegin getBegin()
    {
        return this._begin_;
    }

    public void setBegin(TBegin node)
    {
        if(this._begin_ != null)
        {
            this._begin_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._begin_ = node;
    }

    public PInstructions getRight()
    {
        return this._right_;
    }

    public void setRight(PInstructions node)
    {
        if(this._right_ != null)
        {
            this._right_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._right_ = node;
    }

    public TEnd getEnd()
    {
        return this._end_;
    }

    public void setEnd(TEnd node)
    {
        if(this._end_ != null)
        {
            this._end_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._end_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._left_)
            + toString(this._semikolon_)
            + toString(this._begin_)
            + toString(this._right_)
            + toString(this._end_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._left_ == child)
        {
            this._left_ = null;
            return;
        }

        if(this._semikolon_ == child)
        {
            this._semikolon_ = null;
            return;
        }

        if(this._begin_ == child)
        {
            this._begin_ = null;
            return;
        }

        if(this._right_ == child)
        {
            this._right_ = null;
            return;
        }

        if(this._end_ == child)
        {
            this._end_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._left_ == oldChild)
        {
            setLeft((PInstructions) newChild);
            return;
        }

        if(this._semikolon_ == oldChild)
        {
            setSemikolon((TSemikolon) newChild);
            return;
        }

        if(this._begin_ == oldChild)
        {
            setBegin((TBegin) newChild);
            return;
        }

        if(this._right_ == oldChild)
        {
            setRight((PInstructions) newChild);
            return;
        }

        if(this._end_ == oldChild)
        {
            setEnd((TEnd) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
