/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AMatchedMatchedstmt extends PMatchedstmt
{
    private TIf _if_;
    private PBoolcomp _boolcomp_;
    private TThen _then_;
    private PMatchedstmt _left_;
    private TElse _else_;
    private PMatchedstmt _right_;

    public AMatchedMatchedstmt()
    {
        // Constructor
    }

    public AMatchedMatchedstmt(
        @SuppressWarnings("hiding") TIf _if_,
        @SuppressWarnings("hiding") PBoolcomp _boolcomp_,
        @SuppressWarnings("hiding") TThen _then_,
        @SuppressWarnings("hiding") PMatchedstmt _left_,
        @SuppressWarnings("hiding") TElse _else_,
        @SuppressWarnings("hiding") PMatchedstmt _right_)
    {
        // Constructor
        setIf(_if_);

        setBoolcomp(_boolcomp_);

        setThen(_then_);

        setLeft(_left_);

        setElse(_else_);

        setRight(_right_);

    }

    @Override
    public Object clone()
    {
        return new AMatchedMatchedstmt(
            cloneNode(this._if_),
            cloneNode(this._boolcomp_),
            cloneNode(this._then_),
            cloneNode(this._left_),
            cloneNode(this._else_),
            cloneNode(this._right_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMatchedMatchedstmt(this);
    }

    public TIf getIf()
    {
        return this._if_;
    }

    public void setIf(TIf node)
    {
        if(this._if_ != null)
        {
            this._if_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._if_ = node;
    }

    public PBoolcomp getBoolcomp()
    {
        return this._boolcomp_;
    }

    public void setBoolcomp(PBoolcomp node)
    {
        if(this._boolcomp_ != null)
        {
            this._boolcomp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._boolcomp_ = node;
    }

    public TThen getThen()
    {
        return this._then_;
    }

    public void setThen(TThen node)
    {
        if(this._then_ != null)
        {
            this._then_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._then_ = node;
    }

    public PMatchedstmt getLeft()
    {
        return this._left_;
    }

    public void setLeft(PMatchedstmt node)
    {
        if(this._left_ != null)
        {
            this._left_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._left_ = node;
    }

    public TElse getElse()
    {
        return this._else_;
    }

    public void setElse(TElse node)
    {
        if(this._else_ != null)
        {
            this._else_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._else_ = node;
    }

    public PMatchedstmt getRight()
    {
        return this._right_;
    }

    public void setRight(PMatchedstmt node)
    {
        if(this._right_ != null)
        {
            this._right_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._right_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._if_)
            + toString(this._boolcomp_)
            + toString(this._then_)
            + toString(this._left_)
            + toString(this._else_)
            + toString(this._right_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._if_ == child)
        {
            this._if_ = null;
            return;
        }

        if(this._boolcomp_ == child)
        {
            this._boolcomp_ = null;
            return;
        }

        if(this._then_ == child)
        {
            this._then_ = null;
            return;
        }

        if(this._left_ == child)
        {
            this._left_ = null;
            return;
        }

        if(this._else_ == child)
        {
            this._else_ = null;
            return;
        }

        if(this._right_ == child)
        {
            this._right_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._if_ == oldChild)
        {
            setIf((TIf) newChild);
            return;
        }

        if(this._boolcomp_ == oldChild)
        {
            setBoolcomp((PBoolcomp) newChild);
            return;
        }

        if(this._then_ == oldChild)
        {
            setThen((TThen) newChild);
            return;
        }

        if(this._left_ == oldChild)
        {
            setLeft((PMatchedstmt) newChild);
            return;
        }

        if(this._else_ == oldChild)
        {
            setElse((TElse) newChild);
            return;
        }

        if(this._right_ == oldChild)
        {
            setRight((PMatchedstmt) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
