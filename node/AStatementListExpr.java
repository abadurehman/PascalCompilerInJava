/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import java.util.*;
import analysis.*;

@SuppressWarnings("nls")
public final class AStatementListExpr extends PExpr
{
    private PExpr _list_;
    private final LinkedList<PExpr> _single_ = new LinkedList<PExpr>();

    public AStatementListExpr()
    {
        // Constructor
    }

    public AStatementListExpr(
        @SuppressWarnings("hiding") PExpr _list_,
        @SuppressWarnings("hiding") List<?> _single_)
    {
        // Constructor
        setList(_list_);

        setSingle(_single_);

    }

    @Override
    public Object clone()
    {
        return new AStatementListExpr(
            cloneNode(this._list_),
            cloneList(this._single_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAStatementListExpr(this);
    }

    public PExpr getList()
    {
        return this._list_;
    }

    public void setList(PExpr node)
    {
        if(this._list_ != null)
        {
            this._list_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._list_ = node;
    }

    public LinkedList<PExpr> getSingle()
    {
        return this._single_;
    }

    public void setSingle(List<?> list)
    {
        for(PExpr e : this._single_)
        {
            e.parent(null);
        }
        this._single_.clear();

        for(Object obj_e : list)
        {
            PExpr e = (PExpr) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._single_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._list_)
            + toString(this._single_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._list_ == child)
        {
            this._list_ = null;
            return;
        }

        if(this._single_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._list_ == oldChild)
        {
            setList((PExpr) newChild);
            return;
        }

        for(ListIterator<PExpr> i = this._single_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PExpr) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
