/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPStart().apply(this);
        outStart(node);
    }

    public void inAStart(AStart node)
    {
        defaultIn(node);
    }

    public void outAStart(AStart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStart(AStart node)
    {
        inAStart(node);
        if(node.getProgramend() != null)
        {
            node.getProgramend().apply(this);
        }
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            Collections.reverse(copy);
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDeclarations> copy = new ArrayList<PDeclarations>(node.getDeclarations());
            Collections.reverse(copy);
            for(PDeclarations e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSemikolon() != null)
        {
            node.getSemikolon().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getProgram() != null)
        {
            node.getProgram().apply(this);
        }
        outAStart(node);
    }

    public void inASingleDeclarations(ASingleDeclarations node)
    {
        defaultIn(node);
    }

    public void outASingleDeclarations(ASingleDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleDeclarations(ASingleDeclarations node)
    {
        inASingleDeclarations(node);
        if(node.getSemikolon() != null)
        {
            node.getSemikolon().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outASingleDeclarations(node);
    }

    public void inAIfThenStatementStatement(AIfThenStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAIfThenStatementStatement(AIfThenStatementStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfThenStatementStatement(AIfThenStatementStatement node)
    {
        inAIfThenStatementStatement(node);
        if(node.getIfThenStatement() != null)
        {
            node.getIfThenStatement().apply(this);
        }
        outAIfThenStatementStatement(node);
    }

    public void inAIfThenElseStatementStatement(AIfThenElseStatementStatement node)
    {
        defaultIn(node);
    }

    public void outAIfThenElseStatementStatement(AIfThenElseStatementStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfThenElseStatementStatement(AIfThenElseStatementStatement node)
    {
        inAIfThenElseStatementStatement(node);
        if(node.getIfThenElseStatement() != null)
        {
            node.getIfThenElseStatement().apply(this);
        }
        outAIfThenElseStatementStatement(node);
    }

    public void inAWhileStatement(AWhileStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileStatement(AWhileStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStatement(AWhileStatement node)
    {
        inAWhileStatement(node);
        if(node.getWhileStatement() != null)
        {
            node.getWhileStatement().apply(this);
        }
        outAWhileStatement(node);
    }

    public void inAAssignStatement(AAssignStatement node)
    {
        defaultIn(node);
    }

    public void outAAssignStatement(AAssignStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignStatement(AAssignStatement node)
    {
        inAAssignStatement(node);
        if(node.getAssignment() != null)
        {
            node.getAssignment().apply(this);
        }
        outAAssignStatement(node);
    }

    public void inAPrintStatement(APrintStatement node)
    {
        defaultIn(node);
    }

    public void outAPrintStatement(APrintStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintStatement(APrintStatement node)
    {
        inAPrintStatement(node);
        if(node.getPrint() != null)
        {
            node.getPrint().apply(this);
        }
        outAPrintStatement(node);
    }

    public void inANestedStatement(ANestedStatement node)
    {
        defaultIn(node);
    }

    public void outANestedStatement(ANestedStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANestedStatement(ANestedStatement node)
    {
        inANestedStatement(node);
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getBegin() != null)
        {
            node.getBegin().apply(this);
        }
        outANestedStatement(node);
    }

    public void inABreakStatement(ABreakStatement node)
    {
        defaultIn(node);
    }

    public void outABreakStatement(ABreakStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABreakStatement(ABreakStatement node)
    {
        inABreakStatement(node);
        if(node.getBreak() != null)
        {
            node.getBreak().apply(this);
        }
        outABreakStatement(node);
    }

    public void inAStatement(AStatement node)
    {
        defaultIn(node);
    }

    public void outAStatement(AStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStatement(AStatement node)
    {
        inAStatement(node);
        if(node.getSemikolon() != null)
        {
            node.getSemikolon().apply(this);
        }
        outAStatement(node);
    }

    public void inAPrint(APrint node)
    {
        defaultIn(node);
    }

    public void outAPrint(APrint node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrint(APrint node)
    {
        inAPrint(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getWriteln() != null)
        {
            node.getWriteln().apply(this);
        }
        outAPrint(node);
    }

    public void inAAssignment(AAssignment node)
    {
        defaultIn(node);
    }

    public void outAAssignment(AAssignment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignment(AAssignment node)
    {
        inAAssignment(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAAssignment(node);
    }

    public void inABooleanType(ABooleanType node)
    {
        defaultIn(node);
    }

    public void outABooleanType(ABooleanType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanType(ABooleanType node)
    {
        inABooleanType(node);
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        outABooleanType(node);
    }

    public void inAIntegerType(AIntegerType node)
    {
        defaultIn(node);
    }

    public void outAIntegerType(AIntegerType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerType(AIntegerType node)
    {
        inAIntegerType(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAIntegerType(node);
    }

    public void inAComparisionExpr(AComparisionExpr node)
    {
        defaultIn(node);
    }

    public void outAComparisionExpr(AComparisionExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComparisionExpr(AComparisionExpr node)
    {
        inAComparisionExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getComparision() != null)
        {
            node.getComparision().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAComparisionExpr(node);
    }

    public void inAExpr(AExpr node)
    {
        defaultIn(node);
    }

    public void outAExpr(AExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpr(AExpr node)
    {
        inAExpr(node);
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        outAExpr(node);
    }

    public void inAPlusExpr2(APlusExpr2 node)
    {
        defaultIn(node);
    }

    public void outAPlusExpr2(APlusExpr2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusExpr2(APlusExpr2 node)
    {
        inAPlusExpr2(node);
        if(node.getExpr3() != null)
        {
            node.getExpr3().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        outAPlusExpr2(node);
    }

    public void inAMinusExpr2(AMinusExpr2 node)
    {
        defaultIn(node);
    }

    public void outAMinusExpr2(AMinusExpr2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusExpr2(AMinusExpr2 node)
    {
        inAMinusExpr2(node);
        if(node.getExpr3() != null)
        {
            node.getExpr3().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        outAMinusExpr2(node);
    }

    public void inAOrExpr2(AOrExpr2 node)
    {
        defaultIn(node);
    }

    public void outAOrExpr2(AOrExpr2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExpr2(AOrExpr2 node)
    {
        inAOrExpr2(node);
        if(node.getExpr3() != null)
        {
            node.getExpr3().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        outAOrExpr2(node);
    }

    public void inAXorExpr2(AXorExpr2 node)
    {
        defaultIn(node);
    }

    public void outAXorExpr2(AXorExpr2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorExpr2(AXorExpr2 node)
    {
        inAXorExpr2(node);
        if(node.getExpr3() != null)
        {
            node.getExpr3().apply(this);
        }
        if(node.getXor() != null)
        {
            node.getXor().apply(this);
        }
        if(node.getExpr2() != null)
        {
            node.getExpr2().apply(this);
        }
        outAXorExpr2(node);
    }

    public void inAExpr2(AExpr2 node)
    {
        defaultIn(node);
    }

    public void outAExpr2(AExpr2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpr2(AExpr2 node)
    {
        inAExpr2(node);
        if(node.getExpr3() != null)
        {
            node.getExpr3().apply(this);
        }
        outAExpr2(node);
    }

    public void inAModExpr3(AModExpr3 node)
    {
        defaultIn(node);
    }

    public void outAModExpr3(AModExpr3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModExpr3(AModExpr3 node)
    {
        inAModExpr3(node);
        if(node.getExpr4() != null)
        {
            node.getExpr4().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getExpr3() != null)
        {
            node.getExpr3().apply(this);
        }
        outAModExpr3(node);
    }

    public void inAMultExpr3(AMultExpr3 node)
    {
        defaultIn(node);
    }

    public void outAMultExpr3(AMultExpr3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultExpr3(AMultExpr3 node)
    {
        inAMultExpr3(node);
        if(node.getExpr4() != null)
        {
            node.getExpr4().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getExpr3() != null)
        {
            node.getExpr3().apply(this);
        }
        outAMultExpr3(node);
    }

    public void inADivExpr3(ADivExpr3 node)
    {
        defaultIn(node);
    }

    public void outADivExpr3(ADivExpr3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExpr3(ADivExpr3 node)
    {
        inADivExpr3(node);
        if(node.getExpr4() != null)
        {
            node.getExpr4().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getExpr3() != null)
        {
            node.getExpr3().apply(this);
        }
        outADivExpr3(node);
    }

    public void inAAndExpr3(AAndExpr3 node)
    {
        defaultIn(node);
    }

    public void outAAndExpr3(AAndExpr3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExpr3(AAndExpr3 node)
    {
        inAAndExpr3(node);
        if(node.getExpr4() != null)
        {
            node.getExpr4().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getExpr3() != null)
        {
            node.getExpr3().apply(this);
        }
        outAAndExpr3(node);
    }

    public void inAExpr3(AExpr3 node)
    {
        defaultIn(node);
    }

    public void outAExpr3(AExpr3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpr3(AExpr3 node)
    {
        inAExpr3(node);
        if(node.getExpr4() != null)
        {
            node.getExpr4().apply(this);
        }
        outAExpr3(node);
    }

    public void inANotExpr4(ANotExpr4 node)
    {
        defaultIn(node);
    }

    public void outANotExpr4(ANotExpr4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotExpr4(ANotExpr4 node)
    {
        inANotExpr4(node);
        if(node.getExpr4() != null)
        {
            node.getExpr4().apply(this);
        }
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        outANotExpr4(node);
    }

    public void inANumberExpr4(ANumberExpr4 node)
    {
        defaultIn(node);
    }

    public void outANumberExpr4(ANumberExpr4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberExpr4(ANumberExpr4 node)
    {
        inANumberExpr4(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberExpr4(node);
    }

    public void inAIdentifierExpr4(AIdentifierExpr4 node)
    {
        defaultIn(node);
    }

    public void outAIdentifierExpr4(AIdentifierExpr4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierExpr4(AIdentifierExpr4 node)
    {
        inAIdentifierExpr4(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierExpr4(node);
    }

    public void inATrueExpr4(ATrueExpr4 node)
    {
        defaultIn(node);
    }

    public void outATrueExpr4(ATrueExpr4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueExpr4(ATrueExpr4 node)
    {
        inATrueExpr4(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueExpr4(node);
    }

    public void inAFalseExpr4(AFalseExpr4 node)
    {
        defaultIn(node);
    }

    public void outAFalseExpr4(AFalseExpr4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseExpr4(AFalseExpr4 node)
    {
        inAFalseExpr4(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseExpr4(node);
    }

    public void inAGtComparision(AGtComparision node)
    {
        defaultIn(node);
    }

    public void outAGtComparision(AGtComparision node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtComparision(AGtComparision node)
    {
        inAGtComparision(node);
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outAGtComparision(node);
    }

    public void inAGeComparision(AGeComparision node)
    {
        defaultIn(node);
    }

    public void outAGeComparision(AGeComparision node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGeComparision(AGeComparision node)
    {
        inAGeComparision(node);
        if(node.getGe() != null)
        {
            node.getGe().apply(this);
        }
        outAGeComparision(node);
    }

    public void inALtComparision(ALtComparision node)
    {
        defaultIn(node);
    }

    public void outALtComparision(ALtComparision node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtComparision(ALtComparision node)
    {
        inALtComparision(node);
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        outALtComparision(node);
    }

    public void inALeComparision(ALeComparision node)
    {
        defaultIn(node);
    }

    public void outALeComparision(ALeComparision node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeComparision(ALeComparision node)
    {
        inALeComparision(node);
        if(node.getLe() != null)
        {
            node.getLe().apply(this);
        }
        outALeComparision(node);
    }

    public void inANeComparision(ANeComparision node)
    {
        defaultIn(node);
    }

    public void outANeComparision(ANeComparision node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANeComparision(ANeComparision node)
    {
        inANeComparision(node);
        if(node.getNe() != null)
        {
            node.getNe().apply(this);
        }
        outANeComparision(node);
    }

    public void inAEqComparision(AEqComparision node)
    {
        defaultIn(node);
    }

    public void outAEqComparision(AEqComparision node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqComparision(AEqComparision node)
    {
        inAEqComparision(node);
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        outAEqComparision(node);
    }

    public void inAIfThenStatement(AIfThenStatement node)
    {
        defaultIn(node);
    }

    public void outAIfThenStatement(AIfThenStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfThenStatement(AIfThenStatement node)
    {
        inAIfThenStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfThenStatement(node);
    }

    public void inAIfThenElseStatement(AIfThenElseStatement node)
    {
        defaultIn(node);
    }

    public void outAIfThenElseStatement(AIfThenElseStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfThenElseStatement(AIfThenElseStatement node)
    {
        inAIfThenElseStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getStatementNoShortIf() != null)
        {
            node.getStatementNoShortIf().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfThenElseStatement(node);
    }

    public void inAIfThenElseStatementNoShortIf(AIfThenElseStatementNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAIfThenElseStatementNoShortIf(AIfThenElseStatementNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfThenElseStatementNoShortIf(AIfThenElseStatementNoShortIf node)
    {
        inAIfThenElseStatementNoShortIf(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfThenElseStatementNoShortIf(node);
    }

    public void inAIfStatementNoShortIf(AIfStatementNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAIfStatementNoShortIf(AIfStatementNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStatementNoShortIf(AIfStatementNoShortIf node)
    {
        inAIfStatementNoShortIf(node);
        if(node.getIfThenElseStatementNoShortIf() != null)
        {
            node.getIfThenElseStatementNoShortIf().apply(this);
        }
        outAIfStatementNoShortIf(node);
    }

    public void inAWhileStatementNoShortIf(AWhileStatementNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAWhileStatementNoShortIf(AWhileStatementNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStatementNoShortIf(AWhileStatementNoShortIf node)
    {
        inAWhileStatementNoShortIf(node);
        if(node.getWhileStatementNoShortIf() != null)
        {
            node.getWhileStatementNoShortIf().apply(this);
        }
        outAWhileStatementNoShortIf(node);
    }

    public void inAWhileWhileStatementNoShortIf(AWhileWhileStatementNoShortIf node)
    {
        defaultIn(node);
    }

    public void outAWhileWhileStatementNoShortIf(AWhileWhileStatementNoShortIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileWhileStatementNoShortIf(AWhileWhileStatementNoShortIf node)
    {
        inAWhileWhileStatementNoShortIf(node);
        if(node.getStatementNoShortIf() != null)
        {
            node.getStatementNoShortIf().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        outAWhileWhileStatementNoShortIf(node);
    }

    public void inAWhileWhileStatement(AWhileWhileStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileWhileStatement(AWhileWhileStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileWhileStatement(AWhileWhileStatement node)
    {
        inAWhileWhileStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        outAWhileWhileStatement(node);
    }
}
