/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPStart().apply(this);
        outStart(node);
    }

    public void inAStart(AStart node)
    {
        defaultIn(node);
    }

    public void outAStart(AStart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStart(AStart node)
    {
        inAStart(node);
        if(node.getProgramend() != null)
        {
            node.getProgramend().apply(this);
        }
        if(node.getBody() != null)
        {
            node.getBody().apply(this);
        }
        if(node.getSemikolon() != null)
        {
            node.getSemikolon().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getProgram() != null)
        {
            node.getProgram().apply(this);
        }
        outAStart(node);
    }

    public void inAWithDecBody(AWithDecBody node)
    {
        defaultIn(node);
    }

    public void outAWithDecBody(AWithDecBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWithDecBody(AWithDecBody node)
    {
        inAWithDecBody(node);
        if(node.getInstructions() != null)
        {
            node.getInstructions().apply(this);
        }
        if(node.getBegin() != null)
        {
            node.getBegin().apply(this);
        }
        if(node.getDeclarations() != null)
        {
            node.getDeclarations().apply(this);
        }
        outAWithDecBody(node);
    }

    public void inAWithoutDecBody(AWithoutDecBody node)
    {
        defaultIn(node);
    }

    public void outAWithoutDecBody(AWithoutDecBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWithoutDecBody(AWithoutDecBody node)
    {
        inAWithoutDecBody(node);
        if(node.getInstructions() != null)
        {
            node.getInstructions().apply(this);
        }
        if(node.getBegin() != null)
        {
            node.getBegin().apply(this);
        }
        outAWithoutDecBody(node);
    }

    public void inAWithoutInstructionsBody(AWithoutInstructionsBody node)
    {
        defaultIn(node);
    }

    public void outAWithoutInstructionsBody(AWithoutInstructionsBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWithoutInstructionsBody(AWithoutInstructionsBody node)
    {
        inAWithoutInstructionsBody(node);
        if(node.getBegin() != null)
        {
            node.getBegin().apply(this);
        }
        if(node.getDeclarations() != null)
        {
            node.getDeclarations().apply(this);
        }
        outAWithoutInstructionsBody(node);
    }

    public void inAOpsInstructions(AOpsInstructions node)
    {
        defaultIn(node);
    }

    public void outAOpsInstructions(AOpsInstructions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpsInstructions(AOpsInstructions node)
    {
        inAOpsInstructions(node);
        if(node.getOperation() != null)
        {
            node.getOperation().apply(this);
        }
        outAOpsInstructions(node);
    }

    public void inAMultInstructionsInstructions(AMultInstructionsInstructions node)
    {
        defaultIn(node);
    }

    public void outAMultInstructionsInstructions(AMultInstructionsInstructions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultInstructionsInstructions(AMultInstructionsInstructions node)
    {
        inAMultInstructionsInstructions(node);
        if(node.getOperation() != null)
        {
            node.getOperation().apply(this);
        }
        if(node.getSemikolon() != null)
        {
            node.getSemikolon().apply(this);
        }
        if(node.getInstructions() != null)
        {
            node.getInstructions().apply(this);
        }
        outAMultInstructionsInstructions(node);
    }

    public void inANestedInstructions(ANestedInstructions node)
    {
        defaultIn(node);
    }

    public void outANestedInstructions(ANestedInstructions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANestedInstructions(ANestedInstructions node)
    {
        inANestedInstructions(node);
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        if(node.getInstructions() != null)
        {
            node.getInstructions().apply(this);
        }
        if(node.getBegin() != null)
        {
            node.getBegin().apply(this);
        }
        outANestedInstructions(node);
    }

    public void inAInstructions(AInstructions node)
    {
        defaultIn(node);
    }

    public void outAInstructions(AInstructions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstructions(AInstructions node)
    {
        inAInstructions(node);
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getBegin() != null)
        {
            node.getBegin().apply(this);
        }
        if(node.getSemikolon() != null)
        {
            node.getSemikolon().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAInstructions(node);
    }

    public void inAIfOperation(AIfOperation node)
    {
        defaultIn(node);
    }

    public void outAIfOperation(AIfOperation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfOperation(AIfOperation node)
    {
        inAIfOperation(node);
        if(node.getIfexpr() != null)
        {
            node.getIfexpr().apply(this);
        }
        outAIfOperation(node);
    }

    public void inAWhileOperation(AWhileOperation node)
    {
        defaultIn(node);
    }

    public void outAWhileOperation(AWhileOperation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileOperation(AWhileOperation node)
    {
        inAWhileOperation(node);
        if(node.getWhileexpr() != null)
        {
            node.getWhileexpr().apply(this);
        }
        outAWhileOperation(node);
    }

    public void inAAssignOperation(AAssignOperation node)
    {
        defaultIn(node);
    }

    public void outAAssignOperation(AAssignOperation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignOperation(AAssignOperation node)
    {
        inAAssignOperation(node);
        if(node.getAssignment() != null)
        {
            node.getAssignment().apply(this);
        }
        outAAssignOperation(node);
    }

    public void inAPrintOperation(APrintOperation node)
    {
        defaultIn(node);
    }

    public void outAPrintOperation(APrintOperation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintOperation(APrintOperation node)
    {
        inAPrintOperation(node);
        if(node.getPrint() != null)
        {
            node.getPrint().apply(this);
        }
        outAPrintOperation(node);
    }

    public void inAOperation(AOperation node)
    {
        defaultIn(node);
    }

    public void outAOperation(AOperation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOperation(AOperation node)
    {
        inAOperation(node);
        if(node.getBreak() != null)
        {
            node.getBreak().apply(this);
        }
        outAOperation(node);
    }

    public void inAPrint(APrint node)
    {
        defaultIn(node);
    }

    public void outAPrint(APrint node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrint(APrint node)
    {
        inAPrint(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getWriteln() != null)
        {
            node.getWriteln().apply(this);
        }
        outAPrint(node);
    }

    public void inAAssignment(AAssignment node)
    {
        defaultIn(node);
    }

    public void outAAssignment(AAssignment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignment(AAssignment node)
    {
        inAAssignment(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAAssignment(node);
    }

    public void inAWhileexpr(AWhileexpr node)
    {
        defaultIn(node);
    }

    public void outAWhileexpr(AWhileexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileexpr(AWhileexpr node)
    {
        inAWhileexpr(node);
        if(node.getWhileinstructions() != null)
        {
            node.getWhileinstructions().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getBoolcomp() != null)
        {
            node.getBoolcomp().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        outAWhileexpr(node);
    }

    public void inASingleDeclarations(ASingleDeclarations node)
    {
        defaultIn(node);
    }

    public void outASingleDeclarations(ASingleDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleDeclarations(ASingleDeclarations node)
    {
        inASingleDeclarations(node);
        if(node.getSemikolon() != null)
        {
            node.getSemikolon().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outASingleDeclarations(node);
    }

    public void inAMultiDeclarations(AMultiDeclarations node)
    {
        defaultIn(node);
    }

    public void outAMultiDeclarations(AMultiDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiDeclarations(AMultiDeclarations node)
    {
        inAMultiDeclarations(node);
        if(node.getSemikolon() != null)
        {
            node.getSemikolon().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getDeclarations() != null)
        {
            node.getDeclarations().apply(this);
        }
        outAMultiDeclarations(node);
    }

    public void inABooleanType(ABooleanType node)
    {
        defaultIn(node);
    }

    public void outABooleanType(ABooleanType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanType(ABooleanType node)
    {
        inABooleanType(node);
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        outABooleanType(node);
    }

    public void inAIntegerType(AIntegerType node)
    {
        defaultIn(node);
    }

    public void outAIntegerType(AIntegerType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerType(AIntegerType node)
    {
        inAIntegerType(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAIntegerType(node);
    }

    public void inABoolcompExpr(ABoolcompExpr node)
    {
        defaultIn(node);
    }

    public void outABoolcompExpr(ABoolcompExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolcompExpr(ABoolcompExpr node)
    {
        inABoolcompExpr(node);
        if(node.getBoolcomp() != null)
        {
            node.getBoolcomp().apply(this);
        }
        outABoolcompExpr(node);
    }

    public void inAArithexprExpr(AArithexprExpr node)
    {
        defaultIn(node);
    }

    public void outAArithexprExpr(AArithexprExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArithexprExpr(AArithexprExpr node)
    {
        inAArithexprExpr(node);
        if(node.getArithexpr() != null)
        {
            node.getArithexpr().apply(this);
        }
        outAArithexprExpr(node);
    }

    public void inAPlusArithexpr(APlusArithexpr node)
    {
        defaultIn(node);
    }

    public void outAPlusArithexpr(APlusArithexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusArithexpr(APlusArithexpr node)
    {
        inAPlusArithexpr(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getArithexpr() != null)
        {
            node.getArithexpr().apply(this);
        }
        outAPlusArithexpr(node);
    }

    public void inAMinusArithexpr(AMinusArithexpr node)
    {
        defaultIn(node);
    }

    public void outAMinusArithexpr(AMinusArithexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusArithexpr(AMinusArithexpr node)
    {
        inAMinusArithexpr(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getArithexpr() != null)
        {
            node.getArithexpr().apply(this);
        }
        outAMinusArithexpr(node);
    }

    public void inAArithexpr(AArithexpr node)
    {
        defaultIn(node);
    }

    public void outAArithexpr(AArithexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArithexpr(AArithexpr node)
    {
        inAArithexpr(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAArithexpr(node);
    }

    public void inAModFactor(AModFactor node)
    {
        defaultIn(node);
    }

    public void outAModFactor(AModFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModFactor(AModFactor node)
    {
        inAModFactor(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAModFactor(node);
    }

    public void inAMultFactor(AMultFactor node)
    {
        defaultIn(node);
    }

    public void outAMultFactor(AMultFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultFactor(AMultFactor node)
    {
        inAMultFactor(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAMultFactor(node);
    }

    public void inADivFactor(ADivFactor node)
    {
        defaultIn(node);
    }

    public void outADivFactor(ADivFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivFactor(ADivFactor node)
    {
        inADivFactor(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outADivFactor(node);
    }

    public void inAFactor(AFactor node)
    {
        defaultIn(node);
    }

    public void outAFactor(AFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactor(AFactor node)
    {
        inAFactor(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAFactor(node);
    }

    public void inANumberTerm(ANumberTerm node)
    {
        defaultIn(node);
    }

    public void outANumberTerm(ANumberTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberTerm(ANumberTerm node)
    {
        inANumberTerm(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberTerm(node);
    }

    public void inAIdentifierTerm(AIdentifierTerm node)
    {
        defaultIn(node);
    }

    public void outAIdentifierTerm(AIdentifierTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierTerm(AIdentifierTerm node)
    {
        inAIdentifierTerm(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierTerm(node);
    }

    public void inAGtComparision(AGtComparision node)
    {
        defaultIn(node);
    }

    public void outAGtComparision(AGtComparision node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtComparision(AGtComparision node)
    {
        inAGtComparision(node);
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outAGtComparision(node);
    }

    public void inAGeComparision(AGeComparision node)
    {
        defaultIn(node);
    }

    public void outAGeComparision(AGeComparision node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGeComparision(AGeComparision node)
    {
        inAGeComparision(node);
        if(node.getGe() != null)
        {
            node.getGe().apply(this);
        }
        outAGeComparision(node);
    }

    public void inALtComparision(ALtComparision node)
    {
        defaultIn(node);
    }

    public void outALtComparision(ALtComparision node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtComparision(ALtComparision node)
    {
        inALtComparision(node);
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        outALtComparision(node);
    }

    public void inALeComparision(ALeComparision node)
    {
        defaultIn(node);
    }

    public void outALeComparision(ALeComparision node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeComparision(ALeComparision node)
    {
        inALeComparision(node);
        if(node.getLe() != null)
        {
            node.getLe().apply(this);
        }
        outALeComparision(node);
    }

    public void inANeComparision(ANeComparision node)
    {
        defaultIn(node);
    }

    public void outANeComparision(ANeComparision node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANeComparision(ANeComparision node)
    {
        inANeComparision(node);
        if(node.getNe() != null)
        {
            node.getNe().apply(this);
        }
        outANeComparision(node);
    }

    public void inAEqComparision(AEqComparision node)
    {
        defaultIn(node);
    }

    public void outAEqComparision(AEqComparision node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqComparision(AEqComparision node)
    {
        inAEqComparision(node);
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        outAEqComparision(node);
    }

    public void inAFirstWhileinstructions(AFirstWhileinstructions node)
    {
        defaultIn(node);
    }

    public void outAFirstWhileinstructions(AFirstWhileinstructions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFirstWhileinstructions(AFirstWhileinstructions node)
    {
        inAFirstWhileinstructions(node);
        if(node.getOperation() != null)
        {
            node.getOperation().apply(this);
        }
        outAFirstWhileinstructions(node);
    }

    public void inAWhileinstructions(AWhileinstructions node)
    {
        defaultIn(node);
    }

    public void outAWhileinstructions(AWhileinstructions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileinstructions(AWhileinstructions node)
    {
        inAWhileinstructions(node);
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        if(node.getInstructions() != null)
        {
            node.getInstructions().apply(this);
        }
        if(node.getBegin() != null)
        {
            node.getBegin().apply(this);
        }
        outAWhileinstructions(node);
    }

    public void inAEqBoolcomp(AEqBoolcomp node)
    {
        defaultIn(node);
    }

    public void outAEqBoolcomp(AEqBoolcomp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqBoolcomp(AEqBoolcomp node)
    {
        inAEqBoolcomp(node);
        if(node.getBoolexpr() != null)
        {
            node.getBoolexpr().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getBoolcomp() != null)
        {
            node.getBoolcomp().apply(this);
        }
        outAEqBoolcomp(node);
    }

    public void inANeBoolcomp(ANeBoolcomp node)
    {
        defaultIn(node);
    }

    public void outANeBoolcomp(ANeBoolcomp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANeBoolcomp(ANeBoolcomp node)
    {
        inANeBoolcomp(node);
        if(node.getBoolexpr() != null)
        {
            node.getBoolexpr().apply(this);
        }
        if(node.getNe() != null)
        {
            node.getNe().apply(this);
        }
        if(node.getBoolcomp() != null)
        {
            node.getBoolcomp().apply(this);
        }
        outANeBoolcomp(node);
    }

    public void inAComparisionBoolcomp(AComparisionBoolcomp node)
    {
        defaultIn(node);
    }

    public void outAComparisionBoolcomp(AComparisionBoolcomp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComparisionBoolcomp(AComparisionBoolcomp node)
    {
        inAComparisionBoolcomp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getComparision() != null)
        {
            node.getComparision().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAComparisionBoolcomp(node);
    }

    public void inABoolcomp(ABoolcomp node)
    {
        defaultIn(node);
    }

    public void outABoolcomp(ABoolcomp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolcomp(ABoolcomp node)
    {
        inABoolcomp(node);
        if(node.getBoolexpr() != null)
        {
            node.getBoolexpr().apply(this);
        }
        outABoolcomp(node);
    }

    public void inAOrBoolexpr(AOrBoolexpr node)
    {
        defaultIn(node);
    }

    public void outAOrBoolexpr(AOrBoolexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrBoolexpr(AOrBoolexpr node)
    {
        inAOrBoolexpr(node);
        if(node.getBoolterm() != null)
        {
            node.getBoolterm().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getBoolexpr() != null)
        {
            node.getBoolexpr().apply(this);
        }
        outAOrBoolexpr(node);
    }

    public void inAXorBoolexpr(AXorBoolexpr node)
    {
        defaultIn(node);
    }

    public void outAXorBoolexpr(AXorBoolexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorBoolexpr(AXorBoolexpr node)
    {
        inAXorBoolexpr(node);
        if(node.getBoolterm() != null)
        {
            node.getBoolterm().apply(this);
        }
        if(node.getXor() != null)
        {
            node.getXor().apply(this);
        }
        if(node.getBoolexpr() != null)
        {
            node.getBoolexpr().apply(this);
        }
        outAXorBoolexpr(node);
    }

    public void inABoolexpr(ABoolexpr node)
    {
        defaultIn(node);
    }

    public void outABoolexpr(ABoolexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolexpr(ABoolexpr node)
    {
        inABoolexpr(node);
        if(node.getBoolterm() != null)
        {
            node.getBoolterm().apply(this);
        }
        outABoolexpr(node);
    }

    public void inAAndBoolterm(AAndBoolterm node)
    {
        defaultIn(node);
    }

    public void outAAndBoolterm(AAndBoolterm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndBoolterm(AAndBoolterm node)
    {
        inAAndBoolterm(node);
        if(node.getBoolfactor() != null)
        {
            node.getBoolfactor().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getBoolterm() != null)
        {
            node.getBoolterm().apply(this);
        }
        outAAndBoolterm(node);
    }

    public void inABoolterm(ABoolterm node)
    {
        defaultIn(node);
    }

    public void outABoolterm(ABoolterm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolterm(ABoolterm node)
    {
        inABoolterm(node);
        if(node.getBoolfactor() != null)
        {
            node.getBoolfactor().apply(this);
        }
        outABoolterm(node);
    }

    public void inANotBoolfactor(ANotBoolfactor node)
    {
        defaultIn(node);
    }

    public void outANotBoolfactor(ANotBoolfactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotBoolfactor(ANotBoolfactor node)
    {
        inANotBoolfactor(node);
        if(node.getBoolfactor() != null)
        {
            node.getBoolfactor().apply(this);
        }
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        outANotBoolfactor(node);
    }

    public void inATrueBoolfactor(ATrueBoolfactor node)
    {
        defaultIn(node);
    }

    public void outATrueBoolfactor(ATrueBoolfactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueBoolfactor(ATrueBoolfactor node)
    {
        inATrueBoolfactor(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueBoolfactor(node);
    }

    public void inAFalseBoolfactor(AFalseBoolfactor node)
    {
        defaultIn(node);
    }

    public void outAFalseBoolfactor(AFalseBoolfactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseBoolfactor(AFalseBoolfactor node)
    {
        inAFalseBoolfactor(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseBoolfactor(node);
    }

    public void inABoolfactor(ABoolfactor node)
    {
        defaultIn(node);
    }

    public void outABoolfactor(ABoolfactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolfactor(ABoolfactor node)
    {
        inABoolfactor(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outABoolfactor(node);
    }

    public void inAMatchedIfexpr(AMatchedIfexpr node)
    {
        defaultIn(node);
    }

    public void outAMatchedIfexpr(AMatchedIfexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMatchedIfexpr(AMatchedIfexpr node)
    {
        inAMatchedIfexpr(node);
        if(node.getMatchedstmt() != null)
        {
            node.getMatchedstmt().apply(this);
        }
        outAMatchedIfexpr(node);
    }

    public void inAOpenstmtIfexpr(AOpenstmtIfexpr node)
    {
        defaultIn(node);
    }

    public void outAOpenstmtIfexpr(AOpenstmtIfexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpenstmtIfexpr(AOpenstmtIfexpr node)
    {
        inAOpenstmtIfexpr(node);
        if(node.getOpenstmt() != null)
        {
            node.getOpenstmt().apply(this);
        }
        outAOpenstmtIfexpr(node);
    }

    public void inAMatchedMatchedstmt(AMatchedMatchedstmt node)
    {
        defaultIn(node);
    }

    public void outAMatchedMatchedstmt(AMatchedMatchedstmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMatchedMatchedstmt(AMatchedMatchedstmt node)
    {
        inAMatchedMatchedstmt(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getBoolcomp() != null)
        {
            node.getBoolcomp().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAMatchedMatchedstmt(node);
    }

    public void inAMatchedstmt(AMatchedstmt node)
    {
        defaultIn(node);
    }

    public void outAMatchedstmt(AMatchedstmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMatchedstmt(AMatchedstmt node)
    {
        inAMatchedstmt(node);
        if(node.getWhileinstructions() != null)
        {
            node.getWhileinstructions().apply(this);
        }
        outAMatchedstmt(node);
    }

    public void inAOpenOpenstmt(AOpenOpenstmt node)
    {
        defaultIn(node);
    }

    public void outAOpenOpenstmt(AOpenOpenstmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpenOpenstmt(AOpenOpenstmt node)
    {
        inAOpenOpenstmt(node);
        if(node.getIfexpr() != null)
        {
            node.getIfexpr().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getBoolcomp() != null)
        {
            node.getBoolcomp().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAOpenOpenstmt(node);
    }

    public void inAMatchedOpenstmt(AMatchedOpenstmt node)
    {
        defaultIn(node);
    }

    public void outAMatchedOpenstmt(AMatchedOpenstmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMatchedOpenstmt(AMatchedOpenstmt node)
    {
        inAMatchedOpenstmt(node);
        if(node.getOpenstmt() != null)
        {
            node.getOpenstmt().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getMatchedstmt() != null)
        {
            node.getMatchedstmt().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getBoolcomp() != null)
        {
            node.getBoolcomp().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAMatchedOpenstmt(node);
    }
}
