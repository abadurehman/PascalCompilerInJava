/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPExpr().apply(this);
        outStart(node);
    }

    public void inAStartExpr(AStartExpr node)
    {
        defaultIn(node);
    }

    public void outAStartExpr(AStartExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStartExpr(AStartExpr node)
    {
        inAStartExpr(node);
        {
            List<PExpr> copy = new ArrayList<PExpr>(node.getExpr());
            Collections.reverse(copy);
            for(PExpr e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAStartExpr(node);
    }

    public void inAStatementExpr(AStatementExpr node)
    {
        defaultIn(node);
    }

    public void outAStatementExpr(AStatementExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStatementExpr(AStatementExpr node)
    {
        inAStatementExpr(node);
        {
            List<PExpr> copy = new ArrayList<PExpr>(node.getExpr());
            Collections.reverse(copy);
            for(PExpr e : copy)
            {
                e.apply(this);
            }
        }
        outAStatementExpr(node);
    }

    public void inADeclarationExpr(ADeclarationExpr node)
    {
        defaultIn(node);
    }

    public void outADeclarationExpr(ADeclarationExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarationExpr(ADeclarationExpr node)
    {
        inADeclarationExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outADeclarationExpr(node);
    }

    public void inABooleanExpr(ABooleanExpr node)
    {
        defaultIn(node);
    }

    public void outABooleanExpr(ABooleanExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanExpr(ABooleanExpr node)
    {
        inABooleanExpr(node);
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        outABooleanExpr(node);
    }

    public void inAIntegerExpr(AIntegerExpr node)
    {
        defaultIn(node);
    }

    public void outAIntegerExpr(AIntegerExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerExpr(AIntegerExpr node)
    {
        inAIntegerExpr(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAIntegerExpr(node);
    }
}
