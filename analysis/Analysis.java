/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAStart(AStart node);
    void caseAWithDecBody(AWithDecBody node);
    void caseAWithoutDecBody(AWithoutDecBody node);
    void caseAWithoutInstructionsBody(AWithoutInstructionsBody node);
    void caseAOpsInstructions(AOpsInstructions node);
    void caseAMultInstructionsInstructions(AMultInstructionsInstructions node);
    void caseANestedInstructions(ANestedInstructions node);
    void caseAInstructions(AInstructions node);
    void caseAIfOperation(AIfOperation node);
    void caseAWhileOperation(AWhileOperation node);
    void caseAAssignOperation(AAssignOperation node);
    void caseAPrintOperation(APrintOperation node);
    void caseAOperation(AOperation node);
    void caseAPrint(APrint node);
    void caseAAssignment(AAssignment node);
    void caseASingleDeclarations(ASingleDeclarations node);
    void caseAMultiDeclarations(AMultiDeclarations node);
    void caseABooleanType(ABooleanType node);
    void caseAIntegerType(AIntegerType node);
    void caseABoolcompExpr(ABoolcompExpr node);
    void caseAArithexprExpr(AArithexprExpr node);
    void caseAPlusArithexpr(APlusArithexpr node);
    void caseAMinusArithexpr(AMinusArithexpr node);
    void caseAArithexpr(AArithexpr node);
    void caseAModFactor(AModFactor node);
    void caseAMultFactor(AMultFactor node);
    void caseADivFactor(ADivFactor node);
    void caseAFactor(AFactor node);
    void caseANumberTerm(ANumberTerm node);
    void caseAIdentifierTerm(AIdentifierTerm node);
    void caseAGtComparision(AGtComparision node);
    void caseAGeComparision(AGeComparision node);
    void caseALtComparision(ALtComparision node);
    void caseALeComparision(ALeComparision node);
    void caseANeComparision(ANeComparision node);
    void caseAEqComparision(AEqComparision node);
    void caseAFirstWhileinstructions(AFirstWhileinstructions node);
    void caseAWhileinstructions(AWhileinstructions node);
    void caseAEqBoolcomp(AEqBoolcomp node);
    void caseANeBoolcomp(ANeBoolcomp node);
    void caseAComparisionBoolcomp(AComparisionBoolcomp node);
    void caseABoolcomp(ABoolcomp node);
    void caseAOrBoolexpr(AOrBoolexpr node);
    void caseAXorBoolexpr(AXorBoolexpr node);
    void caseABoolexpr(ABoolexpr node);
    void caseAAndBoolterm(AAndBoolterm node);
    void caseABoolterm(ABoolterm node);
    void caseANotBoolfactor(ANotBoolfactor node);
    void caseATrueBoolfactor(ATrueBoolfactor node);
    void caseAFalseBoolfactor(AFalseBoolfactor node);
    void caseABoolfactor(ABoolfactor node);
    void caseAMatchedIfexpr(AMatchedIfexpr node);
    void caseAOpenstmtIfexpr(AOpenstmtIfexpr node);
    void caseAMatchedMatchedstmt(AMatchedMatchedstmt node);
    void caseAMatchedstmt(AMatchedstmt node);
    void caseAOpenOpenstmt(AOpenOpenstmt node);
    void caseAMatchedOpenstmt(AMatchedOpenstmt node);

    void caseTInteger(TInteger node);
    void caseTBoolean(TBoolean node);
    void caseTVar(TVar node);
    void caseTNumber(TNumber node);
    void caseTAssign(TAssign node);
    void caseTBegin(TBegin node);
    void caseTProgramend(TProgramend node);
    void caseTEnd(TEnd node);
    void caseTProgram(TProgram node);
    void caseTIf(TIf node);
    void caseTThen(TThen node);
    void caseTElse(TElse node);
    void caseTWhile(TWhile node);
    void caseTDo(TDo node);
    void caseTWriteln(TWriteln node);
    void caseTBreak(TBreak node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTEq(TEq node);
    void caseTLt(TLt node);
    void caseTGt(TGt node);
    void caseTLe(TLe node);
    void caseTGe(TGe node);
    void caseTNe(TNe node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTXor(TXor node);
    void caseTNot(TNot node);
    void caseTTrue(TTrue node);
    void caseTFalse(TFalse node);
    void caseTColon(TColon node);
    void caseTSemikolon(TSemikolon node);
    void caseTDot(TDot node);
    void caseTWhitespace(TWhitespace node);
    void caseTIdentifier(TIdentifier node);
    void caseTBoolidentifier(TBoolidentifier node);
    void caseEOF(EOF node);
}
