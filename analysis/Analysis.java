/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAStartExpr(AStartExpr node);
    void caseAStatementExpr(AStatementExpr node);
    void caseAStatementListExpr(AStatementListExpr node);
    void caseADeclarationExpr(ADeclarationExpr node);
    void caseAPrintExpr(APrintExpr node);
    void caseAAssignmentExpr(AAssignmentExpr node);
    void caseAComparisonExpr(AComparisonExpr node);
    void caseAPlusExpr(APlusExpr node);
    void caseAMinusExpr(AMinusExpr node);
    void caseAOrExpr(AOrExpr node);
    void caseAXorExpr(AXorExpr node);
    void caseAModExpr(AModExpr node);
    void caseAMultExpr(AMultExpr node);
    void caseADivExpr(ADivExpr node);
    void caseAAndExpr(AAndExpr node);
    void caseANotExpr(ANotExpr node);
    void caseAUnaryMinusExpr(AUnaryMinusExpr node);
    void caseAUnaryPlusExpr(AUnaryPlusExpr node);
    void caseAWhileExpr(AWhileExpr node);
    void caseAIfThenExpr(AIfThenExpr node);
    void caseAIfThenElseExpr(AIfThenElseExpr node);
    void caseAIntegerExpr(AIntegerExpr node);
    void caseASemicolonExpr(ASemicolonExpr node);
    void caseAIdentifierExpr(AIdentifierExpr node);
    void caseAIdentifierListExpr(AIdentifierListExpr node);
    void caseANumberExpr(ANumberExpr node);
    void caseABooleanExpr(ABooleanExpr node);
    void caseATrueExpr(ATrueExpr node);
    void caseAFalseExpr(AFalseExpr node);
    void caseAGtExpr(AGtExpr node);
    void caseAGeExpr(AGeExpr node);
    void caseALtExpr(ALtExpr node);
    void caseALeExpr(ALeExpr node);
    void caseANeExpr(ANeExpr node);
    void caseAEqExpr(AEqExpr node);
    void caseABreakExpr(ABreakExpr node);

    void caseTInteger(TInteger node);
    void caseTBoolean(TBoolean node);
    void caseTVar(TVar node);
    void caseTNumber(TNumber node);
    void caseTAssign(TAssign node);
    void caseTBegin(TBegin node);
    void caseTProgramend(TProgramend node);
    void caseTEnd(TEnd node);
    void caseTProgram(TProgram node);
    void caseTIf(TIf node);
    void caseTThen(TThen node);
    void caseTElse(TElse node);
    void caseTWhile(TWhile node);
    void caseTDo(TDo node);
    void caseTWriteln(TWriteln node);
    void caseTBreak(TBreak node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTEq(TEq node);
    void caseTLt(TLt node);
    void caseTGt(TGt node);
    void caseTLe(TLe node);
    void caseTGe(TGe node);
    void caseTNe(TNe node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTXor(TXor node);
    void caseTNot(TNot node);
    void caseTTrue(TTrue node);
    void caseTFalse(TFalse node);
    void caseTColon(TColon node);
    void caseTSemicolon(TSemicolon node);
    void caseTDot(TDot node);
    void caseTComma(TComma node);
    void caseTBlankOrComment(TBlankOrComment node);
    void caseTIdentifier(TIdentifier node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
