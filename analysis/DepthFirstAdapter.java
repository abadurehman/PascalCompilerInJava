/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPStart().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAStart(AStart node)
    {
        defaultIn(node);
    }

    public void outAStart(AStart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStart(AStart node)
    {
        inAStart(node);
        if(node.getProgram() != null)
        {
            node.getProgram().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getSemikolon() != null)
        {
            node.getSemikolon().apply(this);
        }
        if(node.getBody() != null)
        {
            node.getBody().apply(this);
        }
        if(node.getProgramend() != null)
        {
            node.getProgramend().apply(this);
        }
        outAStart(node);
    }

    public void inAWithDecBody(AWithDecBody node)
    {
        defaultIn(node);
    }

    public void outAWithDecBody(AWithDecBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWithDecBody(AWithDecBody node)
    {
        inAWithDecBody(node);
        if(node.getDeclarations() != null)
        {
            node.getDeclarations().apply(this);
        }
        if(node.getBegin() != null)
        {
            node.getBegin().apply(this);
        }
        if(node.getInstructions() != null)
        {
            node.getInstructions().apply(this);
        }
        outAWithDecBody(node);
    }

    public void inAWithoutDecBody(AWithoutDecBody node)
    {
        defaultIn(node);
    }

    public void outAWithoutDecBody(AWithoutDecBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWithoutDecBody(AWithoutDecBody node)
    {
        inAWithoutDecBody(node);
        if(node.getBegin() != null)
        {
            node.getBegin().apply(this);
        }
        if(node.getInstructions() != null)
        {
            node.getInstructions().apply(this);
        }
        outAWithoutDecBody(node);
    }

    public void inAWithoutInstructionsBody(AWithoutInstructionsBody node)
    {
        defaultIn(node);
    }

    public void outAWithoutInstructionsBody(AWithoutInstructionsBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWithoutInstructionsBody(AWithoutInstructionsBody node)
    {
        inAWithoutInstructionsBody(node);
        if(node.getDeclarations() != null)
        {
            node.getDeclarations().apply(this);
        }
        if(node.getBegin() != null)
        {
            node.getBegin().apply(this);
        }
        outAWithoutInstructionsBody(node);
    }

    public void inAOpsInstructions(AOpsInstructions node)
    {
        defaultIn(node);
    }

    public void outAOpsInstructions(AOpsInstructions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpsInstructions(AOpsInstructions node)
    {
        inAOpsInstructions(node);
        if(node.getOperation() != null)
        {
            node.getOperation().apply(this);
        }
        outAOpsInstructions(node);
    }

    public void inAMultInstructionsInstructions(AMultInstructionsInstructions node)
    {
        defaultIn(node);
    }

    public void outAMultInstructionsInstructions(AMultInstructionsInstructions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultInstructionsInstructions(AMultInstructionsInstructions node)
    {
        inAMultInstructionsInstructions(node);
        if(node.getInstructions() != null)
        {
            node.getInstructions().apply(this);
        }
        if(node.getSemikolon() != null)
        {
            node.getSemikolon().apply(this);
        }
        if(node.getOperation() != null)
        {
            node.getOperation().apply(this);
        }
        outAMultInstructionsInstructions(node);
    }

    public void inANestedInstructions(ANestedInstructions node)
    {
        defaultIn(node);
    }

    public void outANestedInstructions(ANestedInstructions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANestedInstructions(ANestedInstructions node)
    {
        inANestedInstructions(node);
        if(node.getBegin() != null)
        {
            node.getBegin().apply(this);
        }
        if(node.getInstructions() != null)
        {
            node.getInstructions().apply(this);
        }
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        outANestedInstructions(node);
    }

    public void inAInstructions(AInstructions node)
    {
        defaultIn(node);
    }

    public void outAInstructions(AInstructions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstructions(AInstructions node)
    {
        inAInstructions(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getSemikolon() != null)
        {
            node.getSemikolon().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAInstructions(node);
    }

    public void inAIfOperation(AIfOperation node)
    {
        defaultIn(node);
    }

    public void outAIfOperation(AIfOperation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfOperation(AIfOperation node)
    {
        inAIfOperation(node);
        if(node.getIfexpr() != null)
        {
            node.getIfexpr().apply(this);
        }
        outAIfOperation(node);
    }

    public void inAWhileOperation(AWhileOperation node)
    {
        defaultIn(node);
    }

    public void outAWhileOperation(AWhileOperation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileOperation(AWhileOperation node)
    {
        inAWhileOperation(node);
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getInstructions() != null)
        {
            node.getInstructions().apply(this);
        }
        outAWhileOperation(node);
    }

    public void inAAssignOperation(AAssignOperation node)
    {
        defaultIn(node);
    }

    public void outAAssignOperation(AAssignOperation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignOperation(AAssignOperation node)
    {
        inAAssignOperation(node);
        if(node.getAssignment() != null)
        {
            node.getAssignment().apply(this);
        }
        outAAssignOperation(node);
    }

    public void inAPrintOperation(APrintOperation node)
    {
        defaultIn(node);
    }

    public void outAPrintOperation(APrintOperation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintOperation(APrintOperation node)
    {
        inAPrintOperation(node);
        if(node.getPrint() != null)
        {
            node.getPrint().apply(this);
        }
        outAPrintOperation(node);
    }

    public void inAOperation(AOperation node)
    {
        defaultIn(node);
    }

    public void outAOperation(AOperation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOperation(AOperation node)
    {
        inAOperation(node);
        if(node.getBreak() != null)
        {
            node.getBreak().apply(this);
        }
        outAOperation(node);
    }

    public void inAPrint(APrint node)
    {
        defaultIn(node);
    }

    public void outAPrint(APrint node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrint(APrint node)
    {
        inAPrint(node);
        if(node.getWriteln() != null)
        {
            node.getWriteln().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAPrint(node);
    }

    public void inAAssignment(AAssignment node)
    {
        defaultIn(node);
    }

    public void outAAssignment(AAssignment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignment(AAssignment node)
    {
        inAAssignment(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAAssignment(node);
    }

    public void inASingleDeclarations(ASingleDeclarations node)
    {
        defaultIn(node);
    }

    public void outASingleDeclarations(ASingleDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleDeclarations(ASingleDeclarations node)
    {
        inASingleDeclarations(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getSemikolon() != null)
        {
            node.getSemikolon().apply(this);
        }
        outASingleDeclarations(node);
    }

    public void inAMultiDeclarations(AMultiDeclarations node)
    {
        defaultIn(node);
    }

    public void outAMultiDeclarations(AMultiDeclarations node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiDeclarations(AMultiDeclarations node)
    {
        inAMultiDeclarations(node);
        if(node.getDeclarations() != null)
        {
            node.getDeclarations().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getSemikolon() != null)
        {
            node.getSemikolon().apply(this);
        }
        outAMultiDeclarations(node);
    }

    public void inABooleanType(ABooleanType node)
    {
        defaultIn(node);
    }

    public void outABooleanType(ABooleanType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanType(ABooleanType node)
    {
        inABooleanType(node);
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        outABooleanType(node);
    }

    public void inAIntegerType(AIntegerType node)
    {
        defaultIn(node);
    }

    public void outAIntegerType(AIntegerType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerType(AIntegerType node)
    {
        inAIntegerType(node);
        if(node.getInteger() != null)
        {
            node.getInteger().apply(this);
        }
        outAIntegerType(node);
    }

    public void inAComparisionExpr(AComparisionExpr node)
    {
        defaultIn(node);
    }

    public void outAComparisionExpr(AComparisionExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComparisionExpr(AComparisionExpr node)
    {
        inAComparisionExpr(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getComparision() != null)
        {
            node.getComparision().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAComparisionExpr(node);
    }

    public void inAExpr(AExpr node)
    {
        defaultIn(node);
    }

    public void outAExpr(AExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpr(AExpr node)
    {
        inAExpr(node);
        if(node.getFoo() != null)
        {
            node.getFoo().apply(this);
        }
        outAExpr(node);
    }

    public void inAPlusFoo(APlusFoo node)
    {
        defaultIn(node);
    }

    public void outAPlusFoo(APlusFoo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusFoo(APlusFoo node)
    {
        inAPlusFoo(node);
        if(node.getFoo() != null)
        {
            node.getFoo().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getWtf() != null)
        {
            node.getWtf().apply(this);
        }
        outAPlusFoo(node);
    }

    public void inAMinusFoo(AMinusFoo node)
    {
        defaultIn(node);
    }

    public void outAMinusFoo(AMinusFoo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusFoo(AMinusFoo node)
    {
        inAMinusFoo(node);
        if(node.getFoo() != null)
        {
            node.getFoo().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getWtf() != null)
        {
            node.getWtf().apply(this);
        }
        outAMinusFoo(node);
    }

    public void inAOrFoo(AOrFoo node)
    {
        defaultIn(node);
    }

    public void outAOrFoo(AOrFoo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrFoo(AOrFoo node)
    {
        inAOrFoo(node);
        if(node.getFoo() != null)
        {
            node.getFoo().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getWtf() != null)
        {
            node.getWtf().apply(this);
        }
        outAOrFoo(node);
    }

    public void inAXorFoo(AXorFoo node)
    {
        defaultIn(node);
    }

    public void outAXorFoo(AXorFoo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorFoo(AXorFoo node)
    {
        inAXorFoo(node);
        if(node.getFoo() != null)
        {
            node.getFoo().apply(this);
        }
        if(node.getXor() != null)
        {
            node.getXor().apply(this);
        }
        if(node.getWtf() != null)
        {
            node.getWtf().apply(this);
        }
        outAXorFoo(node);
    }

    public void inAFoo(AFoo node)
    {
        defaultIn(node);
    }

    public void outAFoo(AFoo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFoo(AFoo node)
    {
        inAFoo(node);
        if(node.getWtf() != null)
        {
            node.getWtf().apply(this);
        }
        outAFoo(node);
    }

    public void inAModWtf(AModWtf node)
    {
        defaultIn(node);
    }

    public void outAModWtf(AModWtf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModWtf(AModWtf node)
    {
        inAModWtf(node);
        if(node.getWtf() != null)
        {
            node.getWtf().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getBombe() != null)
        {
            node.getBombe().apply(this);
        }
        outAModWtf(node);
    }

    public void inAMultWtf(AMultWtf node)
    {
        defaultIn(node);
    }

    public void outAMultWtf(AMultWtf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultWtf(AMultWtf node)
    {
        inAMultWtf(node);
        if(node.getWtf() != null)
        {
            node.getWtf().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getBombe() != null)
        {
            node.getBombe().apply(this);
        }
        outAMultWtf(node);
    }

    public void inADivWtf(ADivWtf node)
    {
        defaultIn(node);
    }

    public void outADivWtf(ADivWtf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivWtf(ADivWtf node)
    {
        inADivWtf(node);
        if(node.getWtf() != null)
        {
            node.getWtf().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getBombe() != null)
        {
            node.getBombe().apply(this);
        }
        outADivWtf(node);
    }

    public void inAAndWtf(AAndWtf node)
    {
        defaultIn(node);
    }

    public void outAAndWtf(AAndWtf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndWtf(AAndWtf node)
    {
        inAAndWtf(node);
        if(node.getWtf() != null)
        {
            node.getWtf().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getBombe() != null)
        {
            node.getBombe().apply(this);
        }
        outAAndWtf(node);
    }

    public void inAWtf(AWtf node)
    {
        defaultIn(node);
    }

    public void outAWtf(AWtf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWtf(AWtf node)
    {
        inAWtf(node);
        if(node.getBombe() != null)
        {
            node.getBombe().apply(this);
        }
        outAWtf(node);
    }

    public void inANotBombe(ANotBombe node)
    {
        defaultIn(node);
    }

    public void outANotBombe(ANotBombe node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotBombe(ANotBombe node)
    {
        inANotBombe(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getBombe() != null)
        {
            node.getBombe().apply(this);
        }
        outANotBombe(node);
    }

    public void inANumberBombe(ANumberBombe node)
    {
        defaultIn(node);
    }

    public void outANumberBombe(ANumberBombe node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberBombe(ANumberBombe node)
    {
        inANumberBombe(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberBombe(node);
    }

    public void inAIdentifierBombe(AIdentifierBombe node)
    {
        defaultIn(node);
    }

    public void outAIdentifierBombe(AIdentifierBombe node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierBombe(AIdentifierBombe node)
    {
        inAIdentifierBombe(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierBombe(node);
    }

    public void inATrueBombe(ATrueBombe node)
    {
        defaultIn(node);
    }

    public void outATrueBombe(ATrueBombe node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueBombe(ATrueBombe node)
    {
        inATrueBombe(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueBombe(node);
    }

    public void inAFalseBombe(AFalseBombe node)
    {
        defaultIn(node);
    }

    public void outAFalseBombe(AFalseBombe node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseBombe(AFalseBombe node)
    {
        inAFalseBombe(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseBombe(node);
    }

    public void inAGtComparision(AGtComparision node)
    {
        defaultIn(node);
    }

    public void outAGtComparision(AGtComparision node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGtComparision(AGtComparision node)
    {
        inAGtComparision(node);
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        outAGtComparision(node);
    }

    public void inAGeComparision(AGeComparision node)
    {
        defaultIn(node);
    }

    public void outAGeComparision(AGeComparision node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGeComparision(AGeComparision node)
    {
        inAGeComparision(node);
        if(node.getGe() != null)
        {
            node.getGe().apply(this);
        }
        outAGeComparision(node);
    }

    public void inALtComparision(ALtComparision node)
    {
        defaultIn(node);
    }

    public void outALtComparision(ALtComparision node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALtComparision(ALtComparision node)
    {
        inALtComparision(node);
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        outALtComparision(node);
    }

    public void inALeComparision(ALeComparision node)
    {
        defaultIn(node);
    }

    public void outALeComparision(ALeComparision node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeComparision(ALeComparision node)
    {
        inALeComparision(node);
        if(node.getLe() != null)
        {
            node.getLe().apply(this);
        }
        outALeComparision(node);
    }

    public void inANeComparision(ANeComparision node)
    {
        defaultIn(node);
    }

    public void outANeComparision(ANeComparision node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANeComparision(ANeComparision node)
    {
        inANeComparision(node);
        if(node.getNe() != null)
        {
            node.getNe().apply(this);
        }
        outANeComparision(node);
    }

    public void inAEqComparision(AEqComparision node)
    {
        defaultIn(node);
    }

    public void outAEqComparision(AEqComparision node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqComparision(AEqComparision node)
    {
        inAEqComparision(node);
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        outAEqComparision(node);
    }

    public void inAMatchedIfexpr(AMatchedIfexpr node)
    {
        defaultIn(node);
    }

    public void outAMatchedIfexpr(AMatchedIfexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMatchedIfexpr(AMatchedIfexpr node)
    {
        inAMatchedIfexpr(node);
        if(node.getMatchedstmt() != null)
        {
            node.getMatchedstmt().apply(this);
        }
        outAMatchedIfexpr(node);
    }

    public void inAOpenstmtIfexpr(AOpenstmtIfexpr node)
    {
        defaultIn(node);
    }

    public void outAOpenstmtIfexpr(AOpenstmtIfexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpenstmtIfexpr(AOpenstmtIfexpr node)
    {
        inAOpenstmtIfexpr(node);
        if(node.getOpenstmt() != null)
        {
            node.getOpenstmt().apply(this);
        }
        outAOpenstmtIfexpr(node);
    }

    public void inAMatchedMatchedstmt(AMatchedMatchedstmt node)
    {
        defaultIn(node);
    }

    public void outAMatchedMatchedstmt(AMatchedMatchedstmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMatchedMatchedstmt(AMatchedMatchedstmt node)
    {
        inAMatchedMatchedstmt(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAMatchedMatchedstmt(node);
    }

    public void inAMatchedstmt(AMatchedstmt node)
    {
        defaultIn(node);
    }

    public void outAMatchedstmt(AMatchedstmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMatchedstmt(AMatchedstmt node)
    {
        inAMatchedstmt(node);
        if(node.getOtherInstructions() != null)
        {
            node.getOtherInstructions().apply(this);
        }
        outAMatchedstmt(node);
    }

    public void inAOpenstmt(AOpenstmt node)
    {
        defaultIn(node);
    }

    public void outAOpenstmt(AOpenstmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpenstmt(AOpenstmt node)
    {
        inAOpenstmt(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getIfexpr() != null)
        {
            node.getIfexpr().apply(this);
        }
        outAOpenstmt(node);
    }

    public void inAElseOpenstmt(AElseOpenstmt node)
    {
        defaultIn(node);
    }

    public void outAElseOpenstmt(AElseOpenstmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseOpenstmt(AElseOpenstmt node)
    {
        inAElseOpenstmt(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getMatchedstmt() != null)
        {
            node.getMatchedstmt().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getOpenstmt() != null)
        {
            node.getOpenstmt().apply(this);
        }
        outAElseOpenstmt(node);
    }

    public void inAOpsOtherInstructions(AOpsOtherInstructions node)
    {
        defaultIn(node);
    }

    public void outAOpsOtherInstructions(AOpsOtherInstructions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpsOtherInstructions(AOpsOtherInstructions node)
    {
        inAOpsOtherInstructions(node);
        if(node.getOtherOperation() != null)
        {
            node.getOtherOperation().apply(this);
        }
        outAOpsOtherInstructions(node);
    }

    public void inAMultInstructionsOtherInstructions(AMultInstructionsOtherInstructions node)
    {
        defaultIn(node);
    }

    public void outAMultInstructionsOtherInstructions(AMultInstructionsOtherInstructions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultInstructionsOtherInstructions(AMultInstructionsOtherInstructions node)
    {
        inAMultInstructionsOtherInstructions(node);
        if(node.getOtherInstructions() != null)
        {
            node.getOtherInstructions().apply(this);
        }
        if(node.getSemikolon() != null)
        {
            node.getSemikolon().apply(this);
        }
        if(node.getOtherOperation() != null)
        {
            node.getOtherOperation().apply(this);
        }
        outAMultInstructionsOtherInstructions(node);
    }

    public void inANestedOtherInstructions(ANestedOtherInstructions node)
    {
        defaultIn(node);
    }

    public void outANestedOtherInstructions(ANestedOtherInstructions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANestedOtherInstructions(ANestedOtherInstructions node)
    {
        inANestedOtherInstructions(node);
        if(node.getBegin() != null)
        {
            node.getBegin().apply(this);
        }
        if(node.getOtherInstructions() != null)
        {
            node.getOtherInstructions().apply(this);
        }
        if(node.getEnd() != null)
        {
            node.getEnd().apply(this);
        }
        outANestedOtherInstructions(node);
    }

    public void inAOtherInstructions(AOtherInstructions node)
    {
        defaultIn(node);
    }

    public void outAOtherInstructions(AOtherInstructions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOtherInstructions(AOtherInstructions node)
    {
        inAOtherInstructions(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getSemikolon() != null)
        {
            node.getSemikolon().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAOtherInstructions(node);
    }

    public void inAWhileOtherOperation(AWhileOtherOperation node)
    {
        defaultIn(node);
    }

    public void outAWhileOtherOperation(AWhileOtherOperation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileOtherOperation(AWhileOtherOperation node)
    {
        inAWhileOtherOperation(node);
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getOtherInstructions() != null)
        {
            node.getOtherInstructions().apply(this);
        }
        outAWhileOtherOperation(node);
    }

    public void inAAssignOtherOperation(AAssignOtherOperation node)
    {
        defaultIn(node);
    }

    public void outAAssignOtherOperation(AAssignOtherOperation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignOtherOperation(AAssignOtherOperation node)
    {
        inAAssignOtherOperation(node);
        if(node.getAssignment() != null)
        {
            node.getAssignment().apply(this);
        }
        outAAssignOtherOperation(node);
    }

    public void inAPrintOtherOperation(APrintOtherOperation node)
    {
        defaultIn(node);
    }

    public void outAPrintOtherOperation(APrintOtherOperation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintOtherOperation(APrintOtherOperation node)
    {
        inAPrintOtherOperation(node);
        if(node.getPrint() != null)
        {
            node.getPrint().apply(this);
        }
        outAPrintOtherOperation(node);
    }

    public void inAOtherOperation(AOtherOperation node)
    {
        defaultIn(node);
    }

    public void outAOtherOperation(AOtherOperation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOtherOperation(AOtherOperation node)
    {
        inAOtherOperation(node);
        if(node.getBreak() != null)
        {
            node.getBreak().apply(this);
        }
        outAOtherOperation(node);
    }
}
